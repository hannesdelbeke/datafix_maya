from typing import List
from datafix.core.collector import Collector
from datafix_maya.nodes.actions.select_node import SelectNodeByName
from datafix_maya import types

class _NodeCollector(Collector):
    child_actions: list = [SelectNodeByName]
    def run(self): ...

class AISEnvFacadeCollector(_NodeCollector):
    def collect(self) -> List[types.AISEnvFacade]: ...

class AlembicNodeCollector(_NodeCollector):
    def collect(self) -> List[types.AlembicNode]: ...

class ComputeGlobalCollector(_NodeCollector):
    def collect(self) -> List[types.ComputeGlobal]: ...

class ComputeLocalCollector(_NodeCollector):
    def collect(self) -> List[types.ComputeLocal]: ...

class CustomRigDefaultMappingNodeCollector(_NodeCollector):
    def collect(self) -> List[types.CustomRigDefaultMappingNode]: ...

class CustomRigRetargeterNodeCollector(_NodeCollector):
    def collect(self) -> List[types.CustomRigRetargeterNode]: ...

class HIKCharacterNodeCollector(_NodeCollector):
    def collect(self) -> List[types.HIKCharacterNode]: ...

class HIKCharacterStateClientCollector(_NodeCollector):
    def collect(self) -> List[types.HIKCharacterStateClient]: ...

class HIKControlSetNodeCollector(_NodeCollector):
    def collect(self) -> List[types.HIKControlSetNode]: ...

class HIKEffector2StateCollector(_NodeCollector):
    def collect(self) -> List[types.HIKEffector2State]: ...

class HIKEffectorFromCharacterCollector(_NodeCollector):
    def collect(self) -> List[types.HIKEffectorFromCharacter]: ...

class HIKFK2StateCollector(_NodeCollector):
    def collect(self) -> List[types.HIKFK2State]: ...

class HIKPinning2StateCollector(_NodeCollector):
    def collect(self) -> List[types.HIKPinning2State]: ...

class HIKProperty2StateCollector(_NodeCollector):
    def collect(self) -> List[types.HIKProperty2State]: ...

class HIKRetargeterNodeCollector(_NodeCollector):
    def collect(self) -> List[types.HIKRetargeterNode]: ...

class HIKSK2StateCollector(_NodeCollector):
    def collect(self) -> List[types.HIKSK2State]: ...

class HIKSkeletonGeneratorNodeCollector(_NodeCollector):
    def collect(self) -> List[types.HIKSkeletonGeneratorNode]: ...

class HIKSolverNodeCollector(_NodeCollector):
    def collect(self) -> List[types.HIKSolverNode]: ...

class HIKState2EffectorCollector(_NodeCollector):
    def collect(self) -> List[types.HIKState2Effector]: ...

class HIKState2FKCollector(_NodeCollector):
    def collect(self) -> List[types.HIKState2FK]: ...

class HIKState2GlobalSKCollector(_NodeCollector):
    def collect(self) -> List[types.HIKState2GlobalSK]: ...

class HIKState2SKCollector(_NodeCollector):
    def collect(self) -> List[types.HIKState2SK]: ...

class MASH_AudioCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Audio]: ...

class MASH_BaseNodeCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_BaseNode]: ...

class MASH_BlendCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Blend]: ...

class MASH_BlendDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_BlendDeformer]: ...

class MASH_BreakoutCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Breakout]: ...

class MASH_BulletSolverCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_BulletSolver]: ...

class MASH_ChannelRandomCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_ChannelRandom]: ...

class MASH_ColorCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Color]: ...

class MASH_ConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Constraint]: ...

class MASH_CurveCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Curve]: ...

class MASH_DeformerCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Deformer]: ...

class MASH_DelayCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Delay]: ...

class MASH_DistributeCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Distribute]: ...

class MASH_DynamicsCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Dynamics]: ...

class MASH_DynamicsInitialStateCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_DynamicsInitialState]: ...

class MASH_ExplodeCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Explode]: ...

class MASH_FalloffCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Falloff]: ...

class MASH_FlightCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Flight]: ...

class MASH_FontCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Font]: ...

class MASH_IdCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Id]: ...

class MASH_InfluenceCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Influence]: ...

class MASH_InheritCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Inherit]: ...

class MASH_InitialStateCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_InitialState]: ...

class MASH_JiggleCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Jiggle]: ...

class MASH_LegacyCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Legacy]: ...

class MASH_MathsCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Maths]: ...

class MASH_MultiCurveCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_MultiCurve]: ...

class MASH_MuteCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Mute]: ...

class MASH_NoiseCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Noise]: ...

class MASH_OffsetCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Offset]: ...

class MASH_OrientCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Orient]: ...

class MASH_PfxConnectCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_PfxConnect]: ...

class MASH_PlacerCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Placer]: ...

class MASH_PointToCurveCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_PointToCurve]: ...

class MASH_PointsCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Points]: ...

class MASH_PythonCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Python]: ...

class MASH_RandomCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Random]: ...

class MASH_ReplicatorCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Replicator]: ...

class MASH_ReproCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Repro]: ...

class MASH_ShellDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_ShellDeformer]: ...

class MASH_SignalCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Signal]: ...

class MASH_SpringCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Spring]: ...

class MASH_StrengthCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Strength]: ...

class MASH_SymmetryCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Symmetry]: ...

class MASH_TimeCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Time]: ...

class MASH_TrailsCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Trails]: ...

class MASH_TransformCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Transform]: ...

class MASH_TrigCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Trig]: ...

class MASH_VisibilityCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Visibility]: ...

class MASH_WaiterCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_Waiter]: ...

class MASH_WorldCollector(_NodeCollector):
    def collect(self) -> List[types.MASH_World]: ...

class RScontainerCollector(_NodeCollector):
    def collect(self) -> List[types.RScontainer]: ...

class ShaderfxGameHairCollector(_NodeCollector):
    def collect(self) -> List[types.ShaderfxGameHair]: ...

class ShaderfxShaderCollector(_NodeCollector):
    def collect(self) -> List[types.ShaderfxShader]: ...

class SphereLocatorCollector(_NodeCollector):
    def collect(self) -> List[types.SphereLocator]: ...

class StingrayPBSCollector(_NodeCollector):
    def collect(self) -> List[types.StingrayPBS]: ...

class Unfold3DOptimizeCollector(_NodeCollector):
    def collect(self) -> List[types.Unfold3DOptimize]: ...

class Unfold3DUnfoldCollector(_NodeCollector):
    def collect(self) -> List[types.Unfold3DUnfold]: ...

class aboutToSetValueTestNodeCollector(_NodeCollector):
    def collect(self) -> List[types.aboutToSetValueTestNode]: ...

class absOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.absOverride]: ...

class absUniqueOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.absUniqueOverride]: ...

class absoluteCollector(_NodeCollector):
    def collect(self) -> List[types.absolute]: ...

class acosCollector(_NodeCollector):
    def collect(self) -> List[types.acos]: ...

class addDoubleLinearCollector(_NodeCollector):
    def collect(self) -> List[types.addDoubleLinear]: ...

class addMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.addMatrix]: ...

class adskMaterialCollector(_NodeCollector):
    def collect(self) -> List[types.adskMaterial]: ...

class adskPrepareRenderGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.adskPrepareRenderGlobals]: ...

class aiAOVCollector(_NodeCollector):
    def collect(self) -> List[types.aiAOV]: ...

class aiAOVDriverCollector(_NodeCollector):
    def collect(self) -> List[types.aiAOVDriver]: ...

class aiAOVFilterCollector(_NodeCollector):
    def collect(self) -> List[types.aiAOVFilter]: ...

class aiAbsCollector(_NodeCollector):
    def collect(self) -> List[types.aiAbs]: ...

class aiAddCollector(_NodeCollector):
    def collect(self) -> List[types.aiAdd]: ...

class aiAmbientOcclusionCollector(_NodeCollector):
    def collect(self) -> List[types.aiAmbientOcclusion]: ...

class aiAreaLightCollector(_NodeCollector):
    def collect(self) -> List[types.aiAreaLight]: ...

class aiAtanCollector(_NodeCollector):
    def collect(self) -> List[types.aiAtan]: ...

class aiAtmosphereVolumeCollector(_NodeCollector):
    def collect(self) -> List[types.aiAtmosphereVolume]: ...

class aiAxfShaderCollector(_NodeCollector):
    def collect(self) -> List[types.aiAxfShader]: ...

class aiBarndoorCollector(_NodeCollector):
    def collect(self) -> List[types.aiBarndoor]: ...

class aiBlackbodyCollector(_NodeCollector):
    def collect(self) -> List[types.aiBlackbody]: ...

class aiBump2dCollector(_NodeCollector):
    def collect(self) -> List[types.aiBump2d]: ...

class aiBump3dCollector(_NodeCollector):
    def collect(self) -> List[types.aiBump3d]: ...

class aiCacheCollector(_NodeCollector):
    def collect(self) -> List[types.aiCache]: ...

class aiCameraProjectionCollector(_NodeCollector):
    def collect(self) -> List[types.aiCameraProjection]: ...

class aiCarPaintCollector(_NodeCollector):
    def collect(self) -> List[types.aiCarPaint]: ...

class aiCellNoiseCollector(_NodeCollector):
    def collect(self) -> List[types.aiCellNoise]: ...

class aiCheckerboardCollector(_NodeCollector):
    def collect(self) -> List[types.aiCheckerboard]: ...

class aiClampCollector(_NodeCollector):
    def collect(self) -> List[types.aiClamp]: ...

class aiClipGeoCollector(_NodeCollector):
    def collect(self) -> List[types.aiClipGeo]: ...

class aiCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.aiCollection]: ...

class aiColorConvertCollector(_NodeCollector):
    def collect(self) -> List[types.aiColorConvert]: ...

class aiColorCorrectCollector(_NodeCollector):
    def collect(self) -> List[types.aiColorCorrect]: ...

class aiColorJitterCollector(_NodeCollector):
    def collect(self) -> List[types.aiColorJitter]: ...

class aiColorToFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiColorToFloat]: ...

class aiCompareCollector(_NodeCollector):
    def collect(self) -> List[types.aiCompare]: ...

class aiComplementCollector(_NodeCollector):
    def collect(self) -> List[types.aiComplement]: ...

class aiComplexIorCollector(_NodeCollector):
    def collect(self) -> List[types.aiComplexIor]: ...

class aiCompositeCollector(_NodeCollector):
    def collect(self) -> List[types.aiComposite]: ...

class aiCrossCollector(_NodeCollector):
    def collect(self) -> List[types.aiCross]: ...

class aiCurvatureCollector(_NodeCollector):
    def collect(self) -> List[types.aiCurvature]: ...

class aiCurveCollectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiCurveCollector]: ...

class aiDisableCollector(_NodeCollector):
    def collect(self) -> List[types.aiDisable]: ...

class aiDistanceCollector(_NodeCollector):
    def collect(self) -> List[types.aiDistance]: ...

class aiDivideCollector(_NodeCollector):
    def collect(self) -> List[types.aiDivide]: ...

class aiDotCollector(_NodeCollector):
    def collect(self) -> List[types.aiDot]: ...

class aiExpCollector(_NodeCollector):
    def collect(self) -> List[types.aiExp]: ...

class aiFacingRatioCollector(_NodeCollector):
    def collect(self) -> List[types.aiFacingRatio]: ...

class aiFlakesCollector(_NodeCollector):
    def collect(self) -> List[types.aiFlakes]: ...

class aiFlatCollector(_NodeCollector):
    def collect(self) -> List[types.aiFlat]: ...

class aiFloatToIntCollector(_NodeCollector):
    def collect(self) -> List[types.aiFloatToInt]: ...

class aiFloatToMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.aiFloatToMatrix]: ...

class aiFloatToRgbaCollector(_NodeCollector):
    def collect(self) -> List[types.aiFloatToRgba]: ...

class aiFogCollector(_NodeCollector):
    def collect(self) -> List[types.aiFog]: ...

class aiFractionCollector(_NodeCollector):
    def collect(self) -> List[types.aiFraction]: ...

class aiGoboCollector(_NodeCollector):
    def collect(self) -> List[types.aiGobo]: ...

class aiHairCollector(_NodeCollector):
    def collect(self) -> List[types.aiHair]: ...

class aiImageCollector(_NodeCollector):
    def collect(self) -> List[types.aiImage]: ...

class aiImagerColorCorrectCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerColorCorrect]: ...

class aiImagerColorCurvesCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerColorCurves]: ...

class aiImagerDenoiserNoiceCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerDenoiserNoice]: ...

class aiImagerDenoiserOidnCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerDenoiserOidn]: ...

class aiImagerDenoiserOptixCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerDenoiserOptix]: ...

class aiImagerExposureCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerExposure]: ...

class aiImagerLensEffectsCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerLensEffects]: ...

class aiImagerLightMixerCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerLightMixer]: ...

class aiImagerTonemapCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerTonemap]: ...

class aiImagerWhiteBalanceCollector(_NodeCollector):
    def collect(self) -> List[types.aiImagerWhiteBalance]: ...

class aiIncludeGraphCollector(_NodeCollector):
    def collect(self) -> List[types.aiIncludeGraph]: ...

class aiIsFiniteCollector(_NodeCollector):
    def collect(self) -> List[types.aiIsFinite]: ...

class aiLambertCollector(_NodeCollector):
    def collect(self) -> List[types.aiLambert]: ...

class aiLayerFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiLayerFloat]: ...

class aiLayerRgbaCollector(_NodeCollector):
    def collect(self) -> List[types.aiLayerRgba]: ...

class aiLayerShaderCollector(_NodeCollector):
    def collect(self) -> List[types.aiLayerShader]: ...

class aiLengthCollector(_NodeCollector):
    def collect(self) -> List[types.aiLength]: ...

class aiLightBlockerCollector(_NodeCollector):
    def collect(self) -> List[types.aiLightBlocker]: ...

class aiLightDecayCollector(_NodeCollector):
    def collect(self) -> List[types.aiLightDecay]: ...

class aiLightPortalCollector(_NodeCollector):
    def collect(self) -> List[types.aiLightPortal]: ...

class aiLogCollector(_NodeCollector):
    def collect(self) -> List[types.aiLog]: ...

class aiLookSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.aiLookSwitch]: ...

class aiMaterialXShaderCollector(_NodeCollector):
    def collect(self) -> List[types.aiMaterialXShader]: ...

class aiMaterialxCollector(_NodeCollector):
    def collect(self) -> List[types.aiMaterialx]: ...

class aiMatrixInterpolateCollector(_NodeCollector):
    def collect(self) -> List[types.aiMatrixInterpolate]: ...

class aiMatrixMultiplyVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiMatrixMultiplyVector]: ...

class aiMatrixTransformCollector(_NodeCollector):
    def collect(self) -> List[types.aiMatrixTransform]: ...

class aiMatteCollector(_NodeCollector):
    def collect(self) -> List[types.aiMatte]: ...

class aiMaxCollector(_NodeCollector):
    def collect(self) -> List[types.aiMax]: ...

class aiMergeCollector(_NodeCollector):
    def collect(self) -> List[types.aiMerge]: ...

class aiMeshLightCollector(_NodeCollector):
    def collect(self) -> List[types.aiMeshLight]: ...

class aiMinCollector(_NodeCollector):
    def collect(self) -> List[types.aiMin]: ...

class aiMixShaderCollector(_NodeCollector):
    def collect(self) -> List[types.aiMixShader]: ...

class aiModuloCollector(_NodeCollector):
    def collect(self) -> List[types.aiModulo]: ...

class aiMotionVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiMotionVector]: ...

class aiMultiplyCollector(_NodeCollector):
    def collect(self) -> List[types.aiMultiply]: ...

class aiNegateCollector(_NodeCollector):
    def collect(self) -> List[types.aiNegate]: ...

class aiNoiseCollector(_NodeCollector):
    def collect(self) -> List[types.aiNoise]: ...

class aiNormalMapCollector(_NodeCollector):
    def collect(self) -> List[types.aiNormalMap]: ...

class aiNormalizeCollector(_NodeCollector):
    def collect(self) -> List[types.aiNormalize]: ...

class aiOptionsCollector(_NodeCollector):
    def collect(self) -> List[types.aiOptions]: ...

class aiOslShaderCollector(_NodeCollector):
    def collect(self) -> List[types.aiOslShader]: ...

class aiPassthroughCollector(_NodeCollector):
    def collect(self) -> List[types.aiPassthrough]: ...

class aiPhotometricLightCollector(_NodeCollector):
    def collect(self) -> List[types.aiPhotometricLight]: ...

class aiPhysicalSkyCollector(_NodeCollector):
    def collect(self) -> List[types.aiPhysicalSky]: ...

class aiPowCollector(_NodeCollector):
    def collect(self) -> List[types.aiPow]: ...

class aiRampFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiRampFloat]: ...

class aiRampRgbCollector(_NodeCollector):
    def collect(self) -> List[types.aiRampRgb]: ...

class aiRandomCollector(_NodeCollector):
    def collect(self) -> List[types.aiRandom]: ...

class aiRangeCollector(_NodeCollector):
    def collect(self) -> List[types.aiRange]: ...

class aiRaySwitchCollector(_NodeCollector):
    def collect(self) -> List[types.aiRaySwitch]: ...

class aiReadFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiReadFloat]: ...

class aiReadIntCollector(_NodeCollector):
    def collect(self) -> List[types.aiReadInt]: ...

class aiReadRGBCollector(_NodeCollector):
    def collect(self) -> List[types.aiReadRGB]: ...

class aiReadRGBACollector(_NodeCollector):
    def collect(self) -> List[types.aiReadRGBA]: ...

class aiReciprocalCollector(_NodeCollector):
    def collect(self) -> List[types.aiReciprocal]: ...

class aiRgbToVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiRgbToVector]: ...

class aiRgbaToFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiRgbaToFloat]: ...

class aiRoundCornersCollector(_NodeCollector):
    def collect(self) -> List[types.aiRoundCorners]: ...

class aiSetParameterCollector(_NodeCollector):
    def collect(self) -> List[types.aiSetParameter]: ...

class aiSetTransformCollector(_NodeCollector):
    def collect(self) -> List[types.aiSetTransform]: ...

class aiShadowMatteCollector(_NodeCollector):
    def collect(self) -> List[types.aiShadowMatte]: ...

class aiShuffleCollector(_NodeCollector):
    def collect(self) -> List[types.aiShuffle]: ...

class aiSignCollector(_NodeCollector):
    def collect(self) -> List[types.aiSign]: ...

class aiSkinCollector(_NodeCollector):
    def collect(self) -> List[types.aiSkin]: ...

class aiSkyCollector(_NodeCollector):
    def collect(self) -> List[types.aiSky]: ...

class aiSkyDomeLightCollector(_NodeCollector):
    def collect(self) -> List[types.aiSkyDomeLight]: ...

class aiSpaceTransformCollector(_NodeCollector):
    def collect(self) -> List[types.aiSpaceTransform]: ...

class aiSqrtCollector(_NodeCollector):
    def collect(self) -> List[types.aiSqrt]: ...

class aiStandInCollector(_NodeCollector):
    def collect(self) -> List[types.aiStandIn]: ...

class aiStandardCollector(_NodeCollector):
    def collect(self) -> List[types.aiStandard]: ...

class aiStandardHairCollector(_NodeCollector):
    def collect(self) -> List[types.aiStandardHair]: ...

class aiStandardSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.aiStandardSurface]: ...

class aiStandardVolumeCollector(_NodeCollector):
    def collect(self) -> List[types.aiStandardVolume]: ...

class aiStateFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiStateFloat]: ...

class aiStateIntCollector(_NodeCollector):
    def collect(self) -> List[types.aiStateInt]: ...

class aiStateVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiStateVector]: ...

class aiStringReplaceCollector(_NodeCollector):
    def collect(self) -> List[types.aiStringReplace]: ...

class aiSubtractCollector(_NodeCollector):
    def collect(self) -> List[types.aiSubtract]: ...

class aiSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.aiSwitch]: ...

class aiSwitchOperatorCollector(_NodeCollector):
    def collect(self) -> List[types.aiSwitchOperator]: ...

class aiThinFilmCollector(_NodeCollector):
    def collect(self) -> List[types.aiThinFilm]: ...

class aiToonCollector(_NodeCollector):
    def collect(self) -> List[types.aiToon]: ...

class aiTraceSetCollector(_NodeCollector):
    def collect(self) -> List[types.aiTraceSet]: ...

class aiTrigoCollector(_NodeCollector):
    def collect(self) -> List[types.aiTrigo]: ...

class aiTriplanarCollector(_NodeCollector):
    def collect(self) -> List[types.aiTriplanar]: ...

class aiTwoSidedCollector(_NodeCollector):
    def collect(self) -> List[types.aiTwoSided]: ...

class aiUserDataBoolCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataBool]: ...

class aiUserDataColorCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataColor]: ...

class aiUserDataFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataFloat]: ...

class aiUserDataIntCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataInt]: ...

class aiUserDataStringCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataString]: ...

class aiUserDataVec2Collector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataVec2]: ...

class aiUserDataVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiUserDataVector]: ...

class aiUtilityCollector(_NodeCollector):
    def collect(self) -> List[types.aiUtility]: ...

class aiUvProjectionCollector(_NodeCollector):
    def collect(self) -> List[types.aiUvProjection]: ...

class aiUvTransformCollector(_NodeCollector):
    def collect(self) -> List[types.aiUvTransform]: ...

class aiVectorMapCollector(_NodeCollector):
    def collect(self) -> List[types.aiVectorMap]: ...

class aiVectorToRgbCollector(_NodeCollector):
    def collect(self) -> List[types.aiVectorToRgb]: ...

class aiViewRegionCollector(_NodeCollector):
    def collect(self) -> List[types.aiViewRegion]: ...

class aiVolumeCollector(_NodeCollector):
    def collect(self) -> List[types.aiVolume]: ...

class aiVolumeCollectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiVolumeCollector]: ...

class aiVolumeSampleFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiVolumeSampleFloat]: ...

class aiVolumeSampleRgbCollector(_NodeCollector):
    def collect(self) -> List[types.aiVolumeSampleRgb]: ...

class aiWireframeCollector(_NodeCollector):
    def collect(self) -> List[types.aiWireframe]: ...

class aiWriteColorCollector(_NodeCollector):
    def collect(self) -> List[types.aiWriteColor]: ...

class aiWriteFloatCollector(_NodeCollector):
    def collect(self) -> List[types.aiWriteFloat]: ...

class aiWriteIntCollector(_NodeCollector):
    def collect(self) -> List[types.aiWriteInt]: ...

class aiWriteRgbaCollector(_NodeCollector):
    def collect(self) -> List[types.aiWriteRgba]: ...

class aiWriteVectorCollector(_NodeCollector):
    def collect(self) -> List[types.aiWriteVector]: ...

class aimConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.aimConstraint]: ...

class aimMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.aimMatrix]: ...

class airFieldCollector(_NodeCollector):
    def collect(self) -> List[types.airField]: ...

class airManipCollector(_NodeCollector):
    def collect(self) -> List[types.airManip]: ...

class alignCurveCollector(_NodeCollector):
    def collect(self) -> List[types.alignCurve]: ...

class alignManipCollector(_NodeCollector):
    def collect(self) -> List[types.alignManip]: ...

class alignSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.alignSurface]: ...

class ambientLightCollector(_NodeCollector):
    def collect(self) -> List[types.ambientLight]: ...

class and_Collector(_NodeCollector):
    def collect(self) -> List[types.and_]: ...

class angleBetweenCollector(_NodeCollector):
    def collect(self) -> List[types.angleBetween]: ...

class angleDimensionCollector(_NodeCollector):
    def collect(self) -> List[types.angleDimension]: ...

class animBlendCollector(_NodeCollector):
    def collect(self) -> List[types.animBlend]: ...

class animBlendInOutCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendInOut]: ...

class animBlendNodeAdditiveCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditive]: ...

class animBlendNodeAdditiveDACollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveDA]: ...

class animBlendNodeAdditiveDLCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveDL]: ...

class animBlendNodeAdditiveFCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveF]: ...

class animBlendNodeAdditiveFACollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveFA]: ...

class animBlendNodeAdditiveFLCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveFL]: ...

class animBlendNodeAdditiveI16Collector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveI16]: ...

class animBlendNodeAdditiveI32Collector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveI32]: ...

class animBlendNodeAdditiveRotationCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveRotation]: ...

class animBlendNodeAdditiveScaleCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeAdditiveScale]: ...

class animBlendNodeBooleanCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeBoolean]: ...

class animBlendNodeEnumCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeEnum]: ...

class animBlendNodeTimeCollector(_NodeCollector):
    def collect(self) -> List[types.animBlendNodeTime]: ...

class animClipCollector(_NodeCollector):
    def collect(self) -> List[types.animClip]: ...

class animCurveTACollector(_NodeCollector):
    def collect(self) -> List[types.animCurveTA]: ...

class animCurveTLCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveTL]: ...

class animCurveTTCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveTT]: ...

class animCurveTUCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveTU]: ...

class animCurveUACollector(_NodeCollector):
    def collect(self) -> List[types.animCurveUA]: ...

class animCurveULCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveUL]: ...

class animCurveUTCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveUT]: ...

class animCurveUUCollector(_NodeCollector):
    def collect(self) -> List[types.animCurveUU]: ...

class animLayerCollector(_NodeCollector):
    def collect(self) -> List[types.animLayer]: ...

class anisotropicCollector(_NodeCollector):
    def collect(self) -> List[types.anisotropic]: ...

class annotationShapeCollector(_NodeCollector):
    def collect(self) -> List[types.annotationShape]: ...

class aovChildCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.aovChildCollection]: ...

class aovCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.aovCollection]: ...

class applyAbs2FloatsOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbs2FloatsOverride]: ...

class applyAbs3FloatsOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbs3FloatsOverride]: ...

class applyAbsBoolOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsBoolOverride]: ...

class applyAbsEnumOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsEnumOverride]: ...

class applyAbsFloatOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsFloatOverride]: ...

class applyAbsIntOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsIntOverride]: ...

class applyAbsOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsOverride]: ...

class applyAbsStringOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyAbsStringOverride]: ...

class applyConnectionOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyConnectionOverride]: ...

class applyOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyOverride]: ...

class applyRel2FloatsOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyRel2FloatsOverride]: ...

class applyRel3FloatsOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyRel3FloatsOverride]: ...

class applyRelFloatOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyRelFloatOverride]: ...

class applyRelIntOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyRelIntOverride]: ...

class applyRelOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.applyRelOverride]: ...

class arcLengthDimensionCollector(_NodeCollector):
    def collect(self) -> List[types.arcLengthDimension]: ...

class areaLightCollector(_NodeCollector):
    def collect(self) -> List[types.areaLight]: ...

class arnoldAOVChildSelectorCollector(_NodeCollector):
    def collect(self) -> List[types.arnoldAOVChildSelector]: ...

class arnoldBifrostShapeCollector(_NodeCollector):
    def collect(self) -> List[types.arnoldBifrostShape]: ...

class arrayMapperCollector(_NodeCollector):
    def collect(self) -> List[types.arrayMapper]: ...

class arrowManipCollector(_NodeCollector):
    def collect(self) -> List[types.arrowManip]: ...

class arubaTessellateCollector(_NodeCollector):
    def collect(self) -> List[types.arubaTessellate]: ...

class asinCollector(_NodeCollector):
    def collect(self) -> List[types.asin]: ...

class assemblyDefinitionCollector(_NodeCollector):
    def collect(self) -> List[types.assemblyDefinition]: ...

class assemblyReferenceCollector(_NodeCollector):
    def collect(self) -> List[types.assemblyReference]: ...

class atanCollector(_NodeCollector):
    def collect(self) -> List[types.atan]: ...

class atan2Collector(_NodeCollector):
    def collect(self) -> List[types.atan2]: ...

class attachCurveCollector(_NodeCollector):
    def collect(self) -> List[types.attachCurve]: ...

class attachSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.attachSurface]: ...

class attrHierarchyTestCollector(_NodeCollector):
    def collect(self) -> List[types.attrHierarchyTest]: ...

class audioCollector(_NodeCollector):
    def collect(self) -> List[types.audio]: ...

class averageCollector(_NodeCollector):
    def collect(self) -> List[types.average]: ...

class avgCurvesCollector(_NodeCollector):
    def collect(self) -> List[types.avgCurves]: ...

class avgCurvesManipCollector(_NodeCollector):
    def collect(self) -> List[types.avgCurvesManip]: ...

class avgNurbsSurfacePointsCollector(_NodeCollector):
    def collect(self) -> List[types.avgNurbsSurfacePoints]: ...

class avgSurfacePointsCollector(_NodeCollector):
    def collect(self) -> List[types.avgSurfacePoints]: ...

class axesActionManipCollector(_NodeCollector):
    def collect(self) -> List[types.axesActionManip]: ...

class axisAngleToQuatCollector(_NodeCollector):
    def collect(self) -> List[types.axisAngleToQuat]: ...

class axisFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.axisFromMatrix]: ...

class ballProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.ballProjManip]: ...

class barnDoorManipCollector(_NodeCollector):
    def collect(self) -> List[types.barnDoorManip]: ...

class baseLatticeCollector(_NodeCollector):
    def collect(self) -> List[types.baseLattice]: ...

class basicSelectorCollector(_NodeCollector):
    def collect(self) -> List[types.basicSelector]: ...

class bevelCollector(_NodeCollector):
    def collect(self) -> List[types.bevel]: ...

class bevelManipCollector(_NodeCollector):
    def collect(self) -> List[types.bevelManip]: ...

class bevelPlusCollector(_NodeCollector):
    def collect(self) -> List[types.bevelPlus]: ...

class bezierCurveCollector(_NodeCollector):
    def collect(self) -> List[types.bezierCurve]: ...

class bezierCurveToNurbsCollector(_NodeCollector):
    def collect(self) -> List[types.bezierCurveToNurbs]: ...

class bifShapeCollector(_NodeCollector):
    def collect(self) -> List[types.bifShape]: ...

class bifrostBoardCollector(_NodeCollector):
    def collect(self) -> List[types.bifrostBoard]: ...

class bifrostGeoToMayaCollector(_NodeCollector):
    def collect(self) -> List[types.bifrostGeoToMaya]: ...

class bifrostGraphShapeCollector(_NodeCollector):
    def collect(self) -> List[types.bifrostGraphShape]: ...

class blendColorSetsCollector(_NodeCollector):
    def collect(self) -> List[types.blendColorSets]: ...

class blendColorsCollector(_NodeCollector):
    def collect(self) -> List[types.blendColors]: ...

class blendDeviceCollector(_NodeCollector):
    def collect(self) -> List[types.blendDevice]: ...

class blendFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.blendFalloff]: ...

class blendManipCollector(_NodeCollector):
    def collect(self) -> List[types.blendManip]: ...

class blendMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.blendMatrix]: ...

class blendShapeCollector(_NodeCollector):
    def collect(self) -> List[types.blendShape]: ...

class blendTwoAttrCollector(_NodeCollector):
    def collect(self) -> List[types.blendTwoAttr]: ...

class blendWeightedCollector(_NodeCollector):
    def collect(self) -> List[types.blendWeighted]: ...

class blindDataTemplateCollector(_NodeCollector):
    def collect(self) -> List[types.blindDataTemplate]: ...

class blinnCollector(_NodeCollector):
    def collect(self) -> List[types.blinn]: ...

class boneLatticeCollector(_NodeCollector):
    def collect(self) -> List[types.boneLattice]: ...

class booleanCollector(_NodeCollector):
    def collect(self) -> List[types.boolean]: ...

class boundaryCollector(_NodeCollector):
    def collect(self) -> List[types.boundary]: ...

class brownianCollector(_NodeCollector):
    def collect(self) -> List[types.brownian]: ...

class brushCollector(_NodeCollector):
    def collect(self) -> List[types.brush]: ...

class bulgeCollector(_NodeCollector):
    def collect(self) -> List[types.bulge]: ...

class bump2dCollector(_NodeCollector):
    def collect(self) -> List[types.bump2d]: ...

class bump3dCollector(_NodeCollector):
    def collect(self) -> List[types.bump3d]: ...

class buttonManipCollector(_NodeCollector):
    def collect(self) -> List[types.buttonManip]: ...

class cMuscleCreatorCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleCreator]: ...

class cMuscleDebugCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleDebug]: ...

class cMuscleDirectionCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleDirection]: ...

class cMuscleDisplaceCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleDisplace]: ...

class cMuscleDisplayCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleDisplay]: ...

class cMuscleFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleFalloff]: ...

class cMuscleKeepOutCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleKeepOut]: ...

class cMuscleMultiCollideCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleMultiCollide]: ...

class cMuscleObjectCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleObject]: ...

class cMuscleRelativeCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleRelative]: ...

class cMuscleShaderCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleShader]: ...

class cMuscleSmartCollideCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSmartCollide]: ...

class cMuscleSmartConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSmartConstraint]: ...

class cMuscleSplineCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSpline]: ...

class cMuscleSplineDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSplineDeformer]: ...

class cMuscleStretchCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleStretch]: ...

class cMuscleSurfAttachCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSurfAttach]: ...

class cMuscleSystemCollector(_NodeCollector):
    def collect(self) -> List[types.cMuscleSystem]: ...

class cacheBlendCollector(_NodeCollector):
    def collect(self) -> List[types.cacheBlend]: ...

class cacheFileCollector(_NodeCollector):
    def collect(self) -> List[types.cacheFile]: ...

class caddyManipCollector(_NodeCollector):
    def collect(self) -> List[types.caddyManip]: ...

class caddyManipBaseCollector(_NodeCollector):
    def collect(self) -> List[types.caddyManipBase]: ...

class cameraCollector(_NodeCollector):
    def collect(self) -> List[types.camera]: ...

class cameraManipCollector(_NodeCollector):
    def collect(self) -> List[types.cameraManip]: ...

class cameraPlaneManipCollector(_NodeCollector):
    def collect(self) -> List[types.cameraPlaneManip]: ...

class cameraSetCollector(_NodeCollector):
    def collect(self) -> List[types.cameraSet]: ...

class cameraViewCollector(_NodeCollector):
    def collect(self) -> List[types.cameraView]: ...

class ceilCollector(_NodeCollector):
    def collect(self) -> List[types.ceil]: ...

class centerManipCollector(_NodeCollector):
    def collect(self) -> List[types.centerManip]: ...

class channelsCollector(_NodeCollector):
    def collect(self) -> List[types.channels]: ...

class characterCollector(_NodeCollector):
    def collect(self) -> List[types.character]: ...

class characterMapCollector(_NodeCollector):
    def collect(self) -> List[types.characterMap]: ...

class characterOffsetCollector(_NodeCollector):
    def collect(self) -> List[types.characterOffset]: ...

class checkerCollector(_NodeCollector):
    def collect(self) -> List[types.checker]: ...

class childNodeCollector(_NodeCollector):
    def collect(self) -> List[types.childNode]: ...

class choiceCollector(_NodeCollector):
    def collect(self) -> List[types.choice]: ...

class chooserCollector(_NodeCollector):
    def collect(self) -> List[types.chooser]: ...

class circleManipCollector(_NodeCollector):
    def collect(self) -> List[types.circleManip]: ...

class circleSweepManipCollector(_NodeCollector):
    def collect(self) -> List[types.circleSweepManip]: ...

class clampCollector(_NodeCollector):
    def collect(self) -> List[types.clamp]: ...

class clampRangeCollector(_NodeCollector):
    def collect(self) -> List[types.clampRange]: ...

class clipGhostShapeCollector(_NodeCollector):
    def collect(self) -> List[types.clipGhostShape]: ...

class clipLibraryCollector(_NodeCollector):
    def collect(self) -> List[types.clipLibrary]: ...

class clipSchedulerCollector(_NodeCollector):
    def collect(self) -> List[types.clipScheduler]: ...

class clipToGhostDataCollector(_NodeCollector):
    def collect(self) -> List[types.clipToGhostData]: ...

class closeCurveCollector(_NodeCollector):
    def collect(self) -> List[types.closeCurve]: ...

class closeSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.closeSurface]: ...

class closestPointOnMeshCollector(_NodeCollector):
    def collect(self) -> List[types.closestPointOnMesh]: ...

class closestPointOnSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.closestPointOnSurface]: ...

class clothCollector(_NodeCollector):
    def collect(self) -> List[types.cloth]: ...

class cloudCollector(_NodeCollector):
    def collect(self) -> List[types.cloud]: ...

class clusterCollector(_NodeCollector):
    def collect(self) -> List[types.cluster]: ...

class clusterFlexorShapeCollector(_NodeCollector):
    def collect(self) -> List[types.clusterFlexorShape]: ...

class clusterHandleCollector(_NodeCollector):
    def collect(self) -> List[types.clusterHandle]: ...

class coiManipCollector(_NodeCollector):
    def collect(self) -> List[types.coiManip]: ...

class collectionCollector(_NodeCollector):
    def collect(self) -> List[types.collection]: ...

class collisionModelCollector(_NodeCollector):
    def collect(self) -> List[types.collisionModel]: ...

class colorCompositeCollector(_NodeCollector):
    def collect(self) -> List[types.colorComposite]: ...

class colorConditionCollector(_NodeCollector):
    def collect(self) -> List[types.colorCondition]: ...

class colorConstantCollector(_NodeCollector):
    def collect(self) -> List[types.colorConstant]: ...

class colorCorrectCollector(_NodeCollector):
    def collect(self) -> List[types.colorCorrect]: ...

class colorLogicCollector(_NodeCollector):
    def collect(self) -> List[types.colorLogic]: ...

class colorManagementGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.colorManagementGlobals]: ...

class colorMaskCollector(_NodeCollector):
    def collect(self) -> List[types.colorMask]: ...

class colorMathCollector(_NodeCollector):
    def collect(self) -> List[types.colorMath]: ...

class colorProfileCollector(_NodeCollector):
    def collect(self) -> List[types.colorProfile]: ...

class columnFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.columnFromMatrix]: ...

class combinationShapeCollector(_NodeCollector):
    def collect(self) -> List[types.combinationShape]: ...

class compactPlugArrayTestCollector(_NodeCollector):
    def collect(self) -> List[types.compactPlugArrayTest]: ...

class componentFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.componentFalloff]: ...

class componentManipCollector(_NodeCollector):
    def collect(self) -> List[types.componentManip]: ...

class componentMatchCollector(_NodeCollector):
    def collect(self) -> List[types.componentMatch]: ...

class componentTagBaseCollector(_NodeCollector):
    def collect(self) -> List[types.componentTagBase]: ...

class composeMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.composeMatrix]: ...

class concentricProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.concentricProjManip]: ...

class conditionCollector(_NodeCollector):
    def collect(self) -> List[types.condition]: ...

class connectionOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.connectionOverride]: ...

class connectionUniqueOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.connectionUniqueOverride]: ...

class containerCollector(_NodeCollector):
    def collect(self) -> List[types.container]: ...

class containerBaseCollector(_NodeCollector):
    def collect(self) -> List[types.containerBase]: ...

class contourProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.contourProjManip]: ...

class contrastCollector(_NodeCollector):
    def collect(self) -> List[types.contrast]: ...

class controllerCollector(_NodeCollector):
    def collect(self) -> List[types.controller]: ...

class copyColorSetCollector(_NodeCollector):
    def collect(self) -> List[types.copyColorSet]: ...

class copyUVSetCollector(_NodeCollector):
    def collect(self) -> List[types.copyUVSet]: ...

class cosCollector(_NodeCollector):
    def collect(self) -> List[types.cos]: ...

class cpManipCollector(_NodeCollector):
    def collect(self) -> List[types.cpManip]: ...

class cpvColorCollector(_NodeCollector):
    def collect(self) -> List[types.cpvColor]: ...

class craterCollector(_NodeCollector):
    def collect(self) -> List[types.crater]: ...

class creaseSetCollector(_NodeCollector):
    def collect(self) -> List[types.creaseSet]: ...

class createBPManipCollector(_NodeCollector):
    def collect(self) -> List[types.createBPManip]: ...

class createCVManipCollector(_NodeCollector):
    def collect(self) -> List[types.createCVManip]: ...

class createColorSetCollector(_NodeCollector):
    def collect(self) -> List[types.createColorSet]: ...

class createEPManipCollector(_NodeCollector):
    def collect(self) -> List[types.createEPManip]: ...

class createPtexUVCollector(_NodeCollector):
    def collect(self) -> List[types.createPtexUV]: ...

class createUVSetCollector(_NodeCollector):
    def collect(self) -> List[types.createUVSet]: ...

class crossProductCollector(_NodeCollector):
    def collect(self) -> List[types.crossProduct]: ...

class cryptomatteCollector(_NodeCollector):
    def collect(self) -> List[types.cryptomatte]: ...

class cubeManipCollector(_NodeCollector):
    def collect(self) -> List[types.cubeManip]: ...

class cubicProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.cubicProjManip]: ...

class curveEdManipCollector(_NodeCollector):
    def collect(self) -> List[types.curveEdManip]: ...

class curveFromMeshCoMCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromMeshCoM]: ...

class curveFromMeshEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromMeshEdge]: ...

class curveFromSubdivEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromSubdivEdge]: ...

class curveFromSubdivFaceCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromSubdivFace]: ...

class curveFromSurfaceBndCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromSurfaceBnd]: ...

class curveFromSurfaceCoSCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromSurfaceCoS]: ...

class curveFromSurfaceIsoCollector(_NodeCollector):
    def collect(self) -> List[types.curveFromSurfaceIso]: ...

class curveInfoCollector(_NodeCollector):
    def collect(self) -> List[types.curveInfo]: ...

class curveIntersectCollector(_NodeCollector):
    def collect(self) -> List[types.curveIntersect]: ...

class curveNormalizerAngleCollector(_NodeCollector):
    def collect(self) -> List[types.curveNormalizerAngle]: ...

class curveNormalizerLinearCollector(_NodeCollector):
    def collect(self) -> List[types.curveNormalizerLinear]: ...

class curveSegmentManipCollector(_NodeCollector):
    def collect(self) -> List[types.curveSegmentManip]: ...

class curveVarGroupCollector(_NodeCollector):
    def collect(self) -> List[types.curveVarGroup]: ...

class curveWarpCollector(_NodeCollector):
    def collect(self) -> List[types.curveWarp]: ...

class cylindricalProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.cylindricalProjManip]: ...

class dagContainerCollector(_NodeCollector):
    def collect(self) -> List[types.dagContainer]: ...

class dagPoseCollector(_NodeCollector):
    def collect(self) -> List[types.dagPose]: ...

class dataBlockTestCollector(_NodeCollector):
    def collect(self) -> List[types.dataBlockTest]: ...

class decomposeMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.decomposeMatrix]: ...

class defaultLightListCollector(_NodeCollector):
    def collect(self) -> List[types.defaultLightList]: ...

class defaultRenderUtilityListCollector(_NodeCollector):
    def collect(self) -> List[types.defaultRenderUtilityList]: ...

class defaultRenderingListCollector(_NodeCollector):
    def collect(self) -> List[types.defaultRenderingList]: ...

class defaultShaderListCollector(_NodeCollector):
    def collect(self) -> List[types.defaultShaderList]: ...

class defaultTextureListCollector(_NodeCollector):
    def collect(self) -> List[types.defaultTextureList]: ...

class deformBendCollector(_NodeCollector):
    def collect(self) -> List[types.deformBend]: ...

class deformBendManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformBendManip]: ...

class deformFlareCollector(_NodeCollector):
    def collect(self) -> List[types.deformFlare]: ...

class deformFlareManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformFlareManip]: ...

class deformSineCollector(_NodeCollector):
    def collect(self) -> List[types.deformSine]: ...

class deformSineManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformSineManip]: ...

class deformSquashCollector(_NodeCollector):
    def collect(self) -> List[types.deformSquash]: ...

class deformSquashManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformSquashManip]: ...

class deformTwistCollector(_NodeCollector):
    def collect(self) -> List[types.deformTwist]: ...

class deformTwistManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformTwistManip]: ...

class deformWaveCollector(_NodeCollector):
    def collect(self) -> List[types.deformWave]: ...

class deformWaveManipCollector(_NodeCollector):
    def collect(self) -> List[types.deformWaveManip]: ...

class deleteColorSetCollector(_NodeCollector):
    def collect(self) -> List[types.deleteColorSet]: ...

class deleteComponentCollector(_NodeCollector):
    def collect(self) -> List[types.deleteComponent]: ...

class deleteUVSetCollector(_NodeCollector):
    def collect(self) -> List[types.deleteUVSet]: ...

class deltaMushCollector(_NodeCollector):
    def collect(self) -> List[types.deltaMush]: ...

class detachCurveCollector(_NodeCollector):
    def collect(self) -> List[types.detachCurve]: ...

class detachSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.detachSurface]: ...

class determinantCollector(_NodeCollector):
    def collect(self) -> List[types.determinant]: ...

class directedDiscCollector(_NodeCollector):
    def collect(self) -> List[types.directedDisc]: ...

class directionManipCollector(_NodeCollector):
    def collect(self) -> List[types.directionManip]: ...

class directionalLightCollector(_NodeCollector):
    def collect(self) -> List[types.directionalLight]: ...

class discManipCollector(_NodeCollector):
    def collect(self) -> List[types.discManip]: ...

class diskCacheCollector(_NodeCollector):
    def collect(self) -> List[types.diskCache]: ...

class displacementShaderCollector(_NodeCollector):
    def collect(self) -> List[types.displacementShader]: ...

class displayLayerCollector(_NodeCollector):
    def collect(self) -> List[types.displayLayer]: ...

class displayLayerManagerCollector(_NodeCollector):
    def collect(self) -> List[types.displayLayerManager]: ...

class displayPointsCollector(_NodeCollector):
    def collect(self) -> List[types.displayPoints]: ...

class distanceBetweenCollector(_NodeCollector):
    def collect(self) -> List[types.distanceBetween]: ...

class distanceDimShapeCollector(_NodeCollector):
    def collect(self) -> List[types.distanceDimShape]: ...

class distanceManipCollector(_NodeCollector):
    def collect(self) -> List[types.distanceManip]: ...

class divideCollector(_NodeCollector):
    def collect(self) -> List[types.divide]: ...

class dofCollector(_NodeCollector):
    def collect(self) -> List[types.dof]: ...

class dofManipCollector(_NodeCollector):
    def collect(self) -> List[types.dofManip]: ...

class dotProductCollector(_NodeCollector):
    def collect(self) -> List[types.dotProduct]: ...

class doubleShadingSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.doubleShadingSwitch]: ...

class dpBirailSrfCollector(_NodeCollector):
    def collect(self) -> List[types.dpBirailSrf]: ...

class dragFieldCollector(_NodeCollector):
    def collect(self) -> List[types.dragField]: ...

class dropoffLocatorCollector(_NodeCollector):
    def collect(self) -> List[types.dropoffLocator]: ...

class dropoffManipCollector(_NodeCollector):
    def collect(self) -> List[types.dropoffManip]: ...

class dynAttenuationManipCollector(_NodeCollector):
    def collect(self) -> List[types.dynAttenuationManip]: ...

class dynControllerCollector(_NodeCollector):
    def collect(self) -> List[types.dynController]: ...

class dynGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.dynGlobals]: ...

class dynHolderCollector(_NodeCollector):
    def collect(self) -> List[types.dynHolder]: ...

class dynSpreadManipCollector(_NodeCollector):
    def collect(self) -> List[types.dynSpreadManip]: ...

class dynamicConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.dynamicConstraint]: ...

class editMetadataCollector(_NodeCollector):
    def collect(self) -> List[types.editMetadata]: ...

class editsManagerCollector(_NodeCollector):
    def collect(self) -> List[types.editsManager]: ...

class emitterManipCollector(_NodeCollector):
    def collect(self) -> List[types.emitterManip]: ...

class enableManipCollector(_NodeCollector):
    def collect(self) -> List[types.enableManip]: ...

class envBallCollector(_NodeCollector):
    def collect(self) -> List[types.envBall]: ...

class envChromeCollector(_NodeCollector):
    def collect(self) -> List[types.envChrome]: ...

class envCubeCollector(_NodeCollector):
    def collect(self) -> List[types.envCube]: ...

class envFacadeCollector(_NodeCollector):
    def collect(self) -> List[types.envFacade]: ...

class envFogCollector(_NodeCollector):
    def collect(self) -> List[types.envFog]: ...

class envSkyCollector(_NodeCollector):
    def collect(self) -> List[types.envSky]: ...

class envSphereCollector(_NodeCollector):
    def collect(self) -> List[types.envSphere]: ...

class environmentFogCollector(_NodeCollector):
    def collect(self) -> List[types.environmentFog]: ...

class equalCollector(_NodeCollector):
    def collect(self) -> List[types.equal]: ...

class eulerToQuatCollector(_NodeCollector):
    def collect(self) -> List[types.eulerToQuat]: ...

class explodeNurbsShellCollector(_NodeCollector):
    def collect(self) -> List[types.explodeNurbsShell]: ...

class expressionCollector(_NodeCollector):
    def collect(self) -> List[types.expression]: ...

class extendCurveCollector(_NodeCollector):
    def collect(self) -> List[types.extendCurve]: ...

class extendCurveDistanceManipCollector(_NodeCollector):
    def collect(self) -> List[types.extendCurveDistanceManip]: ...

class extendSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.extendSurface]: ...

class extendSurfaceDistanceManipCollector(_NodeCollector):
    def collect(self) -> List[types.extendSurfaceDistanceManip]: ...

class extrudeCollector(_NodeCollector):
    def collect(self) -> List[types.extrude]: ...

class extrudeManipCollector(_NodeCollector):
    def collect(self) -> List[types.extrudeManip]: ...

class facadeCollector(_NodeCollector):
    def collect(self) -> List[types.facade]: ...

class falloffEvalCollector(_NodeCollector):
    def collect(self) -> List[types.falloffEval]: ...

class ffBlendSrfCollector(_NodeCollector):
    def collect(self) -> List[types.ffBlendSrf]: ...

class ffBlendSrfObsoleteCollector(_NodeCollector):
    def collect(self) -> List[types.ffBlendSrfObsolete]: ...

class ffFilletSrfCollector(_NodeCollector):
    def collect(self) -> List[types.ffFilletSrf]: ...

class ffdCollector(_NodeCollector):
    def collect(self) -> List[types.ffd]: ...

class fieldManipCollector(_NodeCollector):
    def collect(self) -> List[types.fieldManip]: ...

class fieldsManipCollector(_NodeCollector):
    def collect(self) -> List[types.fieldsManip]: ...

class fileCollector(_NodeCollector):
    def collect(self) -> List[types.file]: ...

class filletCurveCollector(_NodeCollector):
    def collect(self) -> List[types.filletCurve]: ...

class fitBsplineCollector(_NodeCollector):
    def collect(self) -> List[types.fitBspline]: ...

class flexorShapeCollector(_NodeCollector):
    def collect(self) -> List[types.flexorShape]: ...

class floatCompositeCollector(_NodeCollector):
    def collect(self) -> List[types.floatComposite]: ...

class floatConditionCollector(_NodeCollector):
    def collect(self) -> List[types.floatCondition]: ...

class floatConstantCollector(_NodeCollector):
    def collect(self) -> List[types.floatConstant]: ...

class floatCorrectCollector(_NodeCollector):
    def collect(self) -> List[types.floatCorrect]: ...

class floatLogicCollector(_NodeCollector):
    def collect(self) -> List[types.floatLogic]: ...

class floatMaskCollector(_NodeCollector):
    def collect(self) -> List[types.floatMask]: ...

class floatMathCollector(_NodeCollector):
    def collect(self) -> List[types.floatMath]: ...

class floorCollector(_NodeCollector):
    def collect(self) -> List[types.floor]: ...

class flowCollector(_NodeCollector):
    def collect(self) -> List[types.flow]: ...

class fluidEmitterCollector(_NodeCollector):
    def collect(self) -> List[types.fluidEmitter]: ...

class fluidShapeCollector(_NodeCollector):
    def collect(self) -> List[types.fluidShape]: ...

class fluidSliceManipCollector(_NodeCollector):
    def collect(self) -> List[types.fluidSliceManip]: ...

class fluidTexture2DCollector(_NodeCollector):
    def collect(self) -> List[types.fluidTexture2D]: ...

class fluidTexture3DCollector(_NodeCollector):
    def collect(self) -> List[types.fluidTexture3D]: ...

class follicleCollector(_NodeCollector):
    def collect(self) -> List[types.follicle]: ...

class forceUpdateManipCollector(_NodeCollector):
    def collect(self) -> List[types.forceUpdateManip]: ...

class fosterParentCollector(_NodeCollector):
    def collect(self) -> List[types.fosterParent]: ...

class fourByFourMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.fourByFourMatrix]: ...

class fractalCollector(_NodeCollector):
    def collect(self) -> List[types.fractal]: ...

class frameCacheCollector(_NodeCollector):
    def collect(self) -> List[types.frameCache]: ...

class freePointManipCollector(_NodeCollector):
    def collect(self) -> List[types.freePointManip]: ...

class freePointTriadManipCollector(_NodeCollector):
    def collect(self) -> List[types.freePointTriadManip]: ...

class gameFbxExporterCollector(_NodeCollector):
    def collect(self) -> List[types.gameFbxExporter]: ...

class gammaCorrectCollector(_NodeCollector):
    def collect(self) -> List[types.gammaCorrect]: ...

class geoConnectableCollector(_NodeCollector):
    def collect(self) -> List[types.geoConnectable]: ...

class geoConnectorCollector(_NodeCollector):
    def collect(self) -> List[types.geoConnector]: ...

class geomBindCollector(_NodeCollector):
    def collect(self) -> List[types.geomBind]: ...

class geometryConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.geometryConstraint]: ...

class geometryFilterCollector(_NodeCollector):
    def collect(self) -> List[types.geometryFilter]: ...

class geometryOnLineManipCollector(_NodeCollector):
    def collect(self) -> List[types.geometryOnLineManip]: ...

class geometryVarGroupCollector(_NodeCollector):
    def collect(self) -> List[types.geometryVarGroup]: ...

class globalCacheControlCollector(_NodeCollector):
    def collect(self) -> List[types.globalCacheControl]: ...

class globalStitchCollector(_NodeCollector):
    def collect(self) -> List[types.globalStitch]: ...

class gpuCacheCollector(_NodeCollector):
    def collect(self) -> List[types.gpuCache]: ...

class graniteCollector(_NodeCollector):
    def collect(self) -> List[types.granite]: ...

class gravityFieldCollector(_NodeCollector):
    def collect(self) -> List[types.gravityField]: ...

class greasePencilSequenceCollector(_NodeCollector):
    def collect(self) -> List[types.greasePencilSequence]: ...

class greasePlaneCollector(_NodeCollector):
    def collect(self) -> List[types.greasePlane]: ...

class greasePlaneRenderShapeCollector(_NodeCollector):
    def collect(self) -> List[types.greasePlaneRenderShape]: ...

class greaterThanCollector(_NodeCollector):
    def collect(self) -> List[types.greaterThan]: ...

class gridCollector(_NodeCollector):
    def collect(self) -> List[types.grid]: ...

class groupCollector(_NodeCollector):
    def collect(self) -> List[types.group]: ...

class groupIdCollector(_NodeCollector):
    def collect(self) -> List[types.groupId]: ...

class groupPartsCollector(_NodeCollector):
    def collect(self) -> List[types.groupParts]: ...

class guideCollector(_NodeCollector):
    def collect(self) -> List[types.guide]: ...

class hairConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.hairConstraint]: ...

class hairPhysicalShaderCollector(_NodeCollector):
    def collect(self) -> List[types.hairPhysicalShader]: ...

class hairSystemCollector(_NodeCollector):
    def collect(self) -> List[types.hairSystem]: ...

class hairTubeShaderCollector(_NodeCollector):
    def collect(self) -> List[types.hairTubeShader]: ...

class hardenPointCollector(_NodeCollector):
    def collect(self) -> List[types.hardenPoint]: ...

class hardwareRenderGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.hardwareRenderGlobals]: ...

class hardwareRenderingGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.hardwareRenderingGlobals]: ...

class heightFieldCollector(_NodeCollector):
    def collect(self) -> List[types.heightField]: ...

class hierarchyTestNode1Collector(_NodeCollector):
    def collect(self) -> List[types.hierarchyTestNode1]: ...

class hierarchyTestNode2Collector(_NodeCollector):
    def collect(self) -> List[types.hierarchyTestNode2]: ...

class hierarchyTestNode3Collector(_NodeCollector):
    def collect(self) -> List[types.hierarchyTestNode3]: ...

class hikEffectorCollector(_NodeCollector):
    def collect(self) -> List[types.hikEffector]: ...

class hikFKJointCollector(_NodeCollector):
    def collect(self) -> List[types.hikFKJoint]: ...

class hikFloorContactMarkerCollector(_NodeCollector):
    def collect(self) -> List[types.hikFloorContactMarker]: ...

class hikGroundPlaneCollector(_NodeCollector):
    def collect(self) -> List[types.hikGroundPlane]: ...

class hikHandleCollector(_NodeCollector):
    def collect(self) -> List[types.hikHandle]: ...

class hikIKEffectorCollector(_NodeCollector):
    def collect(self) -> List[types.hikIKEffector]: ...

class hikSolverCollector(_NodeCollector):
    def collect(self) -> List[types.hikSolver]: ...

class historySwitchCollector(_NodeCollector):
    def collect(self) -> List[types.historySwitch]: ...

class holdMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.holdMatrix]: ...

class hsvToRgbCollector(_NodeCollector):
    def collect(self) -> List[types.hsvToRgb]: ...

class hwReflectionMapCollector(_NodeCollector):
    def collect(self) -> List[types.hwReflectionMap]: ...

class hwRenderGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.hwRenderGlobals]: ...

class hyperGraphInfoCollector(_NodeCollector):
    def collect(self) -> List[types.hyperGraphInfo]: ...

class hyperLayoutCollector(_NodeCollector):
    def collect(self) -> List[types.hyperLayout]: ...

class hyperViewCollector(_NodeCollector):
    def collect(self) -> List[types.hyperView]: ...

class igBrushManipCollector(_NodeCollector):
    def collect(self) -> List[types.igBrushManip]: ...

class igmDescriptionCollector(_NodeCollector):
    def collect(self) -> List[types.igmDescription]: ...

class ik2BsolverCollector(_NodeCollector):
    def collect(self) -> List[types.ik2Bsolver]: ...

class ikEffectorCollector(_NodeCollector):
    def collect(self) -> List[types.ikEffector]: ...

class ikHandleCollector(_NodeCollector):
    def collect(self) -> List[types.ikHandle]: ...

class ikMCsolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikMCsolver]: ...

class ikPASolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikPASolver]: ...

class ikRPManipCollector(_NodeCollector):
    def collect(self) -> List[types.ikRPManip]: ...

class ikRPsolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikRPsolver]: ...

class ikSCsolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikSCsolver]: ...

class ikSplineManipCollector(_NodeCollector):
    def collect(self) -> List[types.ikSplineManip]: ...

class ikSplineSolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikSplineSolver]: ...

class ikSpringSolverCollector(_NodeCollector):
    def collect(self) -> List[types.ikSpringSolver]: ...

class ikSystemCollector(_NodeCollector):
    def collect(self) -> List[types.ikSystem]: ...

class imagePlaneCollector(_NodeCollector):
    def collect(self) -> List[types.imagePlane]: ...

class implicitBoxCollector(_NodeCollector):
    def collect(self) -> List[types.implicitBox]: ...

class implicitConeCollector(_NodeCollector):
    def collect(self) -> List[types.implicitCone]: ...

class implicitSphereCollector(_NodeCollector):
    def collect(self) -> List[types.implicitSphere]: ...

class indexManipCollector(_NodeCollector):
    def collect(self) -> List[types.indexManip]: ...

class insertKnotCurveCollector(_NodeCollector):
    def collect(self) -> List[types.insertKnotCurve]: ...

class insertKnotSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.insertKnotSurface]: ...

class instancerCollector(_NodeCollector):
    def collect(self) -> List[types.instancer]: ...

class intersectSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.intersectSurface]: ...

class inverseLerpCollector(_NodeCollector):
    def collect(self) -> List[types.inverseLerp]: ...

class inverseMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.inverseMatrix]: ...

class isoparmManipCollector(_NodeCollector):
    def collect(self) -> List[types.isoparmManip]: ...

class jiggleCollector(_NodeCollector):
    def collect(self) -> List[types.jiggle]: ...

class jointCollector(_NodeCollector):
    def collect(self) -> List[types.joint]: ...

class jointClusterCollector(_NodeCollector):
    def collect(self) -> List[types.jointCluster]: ...

class jointClusterManipCollector(_NodeCollector):
    def collect(self) -> List[types.jointClusterManip]: ...

class jointFfdCollector(_NodeCollector):
    def collect(self) -> List[types.jointFfd]: ...

class jointLatticeCollector(_NodeCollector):
    def collect(self) -> List[types.jointLattice]: ...

class jointTranslateManipCollector(_NodeCollector):
    def collect(self) -> List[types.jointTranslateManip]: ...

class keyframeRegionManipCollector(_NodeCollector):
    def collect(self) -> List[types.keyframeRegionManip]: ...

class keyingGroupCollector(_NodeCollector):
    def collect(self) -> List[types.keyingGroup]: ...

class lambertCollector(_NodeCollector):
    def collect(self) -> List[types.lambert]: ...

class latticeCollector(_NodeCollector):
    def collect(self) -> List[types.lattice]: ...

class layeredShaderCollector(_NodeCollector):
    def collect(self) -> List[types.layeredShader]: ...

class layeredTextureCollector(_NodeCollector):
    def collect(self) -> List[types.layeredTexture]: ...

class leastSquaresModifierCollector(_NodeCollector):
    def collect(self) -> List[types.leastSquaresModifier]: ...

class leatherCollector(_NodeCollector):
    def collect(self) -> List[types.leather]: ...

class lengthCollector(_NodeCollector):
    def collect(self) -> List[types.length]: ...

class lerpCollector(_NodeCollector):
    def collect(self) -> List[types.lerp]: ...

class lessThanCollector(_NodeCollector):
    def collect(self) -> List[types.lessThan]: ...

class lightEditorCollector(_NodeCollector):
    def collect(self) -> List[types.lightEditor]: ...

class lightFogCollector(_NodeCollector):
    def collect(self) -> List[types.lightFog]: ...

class lightGroupCollector(_NodeCollector):
    def collect(self) -> List[types.lightGroup]: ...

class lightInfoCollector(_NodeCollector):
    def collect(self) -> List[types.lightInfo]: ...

class lightItemCollector(_NodeCollector):
    def collect(self) -> List[types.lightItem]: ...

class lightItemBaseCollector(_NodeCollector):
    def collect(self) -> List[types.lightItemBase]: ...

class lightLinkerCollector(_NodeCollector):
    def collect(self) -> List[types.lightLinker]: ...

class lightListCollector(_NodeCollector):
    def collect(self) -> List[types.lightList]: ...

class lightManipCollector(_NodeCollector):
    def collect(self) -> List[types.lightManip]: ...

class lightsChildCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.lightsChildCollection]: ...

class lightsCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.lightsCollection]: ...

class lightsCollectionSelectorCollector(_NodeCollector):
    def collect(self) -> List[types.lightsCollectionSelector]: ...

class limitManipCollector(_NodeCollector):
    def collect(self) -> List[types.limitManip]: ...

class lineManipCollector(_NodeCollector):
    def collect(self) -> List[types.lineManip]: ...

class lineModifierCollector(_NodeCollector):
    def collect(self) -> List[types.lineModifier]: ...

class listItemCollector(_NodeCollector):
    def collect(self) -> List[types.listItem]: ...

class locatorCollector(_NodeCollector):
    def collect(self) -> List[types.locator]: ...

class lodGroupCollector(_NodeCollector):
    def collect(self) -> List[types.lodGroup]: ...

class lodThresholdsCollector(_NodeCollector):
    def collect(self) -> List[types.lodThresholds]: ...

class loftCollector(_NodeCollector):
    def collect(self) -> List[types.loft]: ...

class logCollector(_NodeCollector):
    def collect(self) -> List[types.log]: ...

class lookAtCollector(_NodeCollector):
    def collect(self) -> List[types.lookAt]: ...

class luminanceCollector(_NodeCollector):
    def collect(self) -> List[types.luminance]: ...

class makeGroupCollector(_NodeCollector):
    def collect(self) -> List[types.makeGroup]: ...

class makeIllustratorCurvesCollector(_NodeCollector):
    def collect(self) -> List[types.makeIllustratorCurves]: ...

class makeNurbCircleCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbCircle]: ...

class makeNurbConeCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbCone]: ...

class makeNurbCubeCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbCube]: ...

class makeNurbCylinderCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbCylinder]: ...

class makeNurbPlaneCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbPlane]: ...

class makeNurbSphereCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbSphere]: ...

class makeNurbTorusCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbTorus]: ...

class makeNurbsSquareCollector(_NodeCollector):
    def collect(self) -> List[types.makeNurbsSquare]: ...

class makeTextCurvesCollector(_NodeCollector):
    def collect(self) -> List[types.makeTextCurves]: ...

class makeThreePointCircularArcCollector(_NodeCollector):
    def collect(self) -> List[types.makeThreePointCircularArc]: ...

class makeThreePointCircularArcManipCollector(_NodeCollector):
    def collect(self) -> List[types.makeThreePointCircularArcManip]: ...

class makeTwoPointCircularArcCollector(_NodeCollector):
    def collect(self) -> List[types.makeTwoPointCircularArc]: ...

class makeTwoPointCircularArcManipCollector(_NodeCollector):
    def collect(self) -> List[types.makeTwoPointCircularArcManip]: ...

class mandelbrotCollector(_NodeCollector):
    def collect(self) -> List[types.mandelbrot]: ...

class mandelbrot3DCollector(_NodeCollector):
    def collect(self) -> List[types.mandelbrot3D]: ...

class manip2DContainerCollector(_NodeCollector):
    def collect(self) -> List[types.manip2DContainer]: ...

class manipContainerCollector(_NodeCollector):
    def collect(self) -> List[types.manipContainer]: ...

class marbleCollector(_NodeCollector):
    def collect(self) -> List[types.marble]: ...

class markerManipCollector(_NodeCollector):
    def collect(self) -> List[types.markerManip]: ...

class materialFacadeCollector(_NodeCollector):
    def collect(self) -> List[types.materialFacade]: ...

class materialInfoCollector(_NodeCollector):
    def collect(self) -> List[types.materialInfo]: ...

class materialOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.materialOverride]: ...

class materialTemplateCollector(_NodeCollector):
    def collect(self) -> List[types.materialTemplate]: ...

class materialTemplateOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.materialTemplateOverride]: ...

class maxCollector(_NodeCollector):
    def collect(self) -> List[types.max]: ...

class mayaUsdGeomNodeCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdGeomNode]: ...

class mayaUsdLayerManagerCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdLayerManager]: ...

class mayaUsdProxyShapeCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdProxyShape]: ...

class mayaUsdProxyShapeBaseCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdProxyShapeBase]: ...

class mayaUsdProxyShapeListenerCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdProxyShapeListener]: ...

class mayaUsdProxyShapeListenerBaseCollector(_NodeCollector):
    def collect(self) -> List[types.mayaUsdProxyShapeListenerBase]: ...

class membraneCollector(_NodeCollector):
    def collect(self) -> List[types.membrane]: ...

class meshCollector(_NodeCollector):
    def collect(self) -> List[types.mesh]: ...

class meshVarGroupCollector(_NodeCollector):
    def collect(self) -> List[types.meshVarGroup]: ...

class minCollector(_NodeCollector):
    def collect(self) -> List[types.min]: ...

class moduloCollector(_NodeCollector):
    def collect(self) -> List[types.modulo]: ...

class morphCollector(_NodeCollector):
    def collect(self) -> List[types.morph]: ...

class motionPathCollector(_NodeCollector):
    def collect(self) -> List[types.motionPath]: ...

class motionPathManipCollector(_NodeCollector):
    def collect(self) -> List[types.motionPathManip]: ...

class motionTrailCollector(_NodeCollector):
    def collect(self) -> List[types.motionTrail]: ...

class motionTrailShapeCollector(_NodeCollector):
    def collect(self) -> List[types.motionTrailShape]: ...

class mountainCollector(_NodeCollector):
    def collect(self) -> List[types.mountain]: ...

class moveBezierHandleManipCollector(_NodeCollector):
    def collect(self) -> List[types.moveBezierHandleManip]: ...

class moveVertexManipCollector(_NodeCollector):
    def collect(self) -> List[types.moveVertexManip]: ...

class movieCollector(_NodeCollector):
    def collect(self) -> List[types.movie]: ...

class mpBirailSrfCollector(_NodeCollector):
    def collect(self) -> List[types.mpBirailSrf]: ...

class multDoubleLinearCollector(_NodeCollector):
    def collect(self) -> List[types.multDoubleLinear]: ...

class multMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.multMatrix]: ...

class multilisterLightCollector(_NodeCollector):
    def collect(self) -> List[types.multilisterLight]: ...

class multiplyCollector(_NodeCollector):
    def collect(self) -> List[types.multiply]: ...

class multiplyDivideCollector(_NodeCollector):
    def collect(self) -> List[types.multiplyDivide]: ...

class multiplyPointByMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.multiplyPointByMatrix]: ...

class multiplyVectorByMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.multiplyVectorByMatrix]: ...

class muteCollector(_NodeCollector):
    def collect(self) -> List[types.mute]: ...

class nClothCollector(_NodeCollector):
    def collect(self) -> List[types.nCloth]: ...

class nComponentCollector(_NodeCollector):
    def collect(self) -> List[types.nComponent]: ...

class nParticleCollector(_NodeCollector):
    def collect(self) -> List[types.nParticle]: ...

class nRigidCollector(_NodeCollector):
    def collect(self) -> List[types.nRigid]: ...

class nearestPointOnCurveCollector(_NodeCollector):
    def collect(self) -> List[types.nearestPointOnCurve]: ...

class negateCollector(_NodeCollector):
    def collect(self) -> List[types.negate]: ...

class networkCollector(_NodeCollector):
    def collect(self) -> List[types.network]: ...

class newtonFieldCollector(_NodeCollector):
    def collect(self) -> List[types.newtonField]: ...

class newtonManipCollector(_NodeCollector):
    def collect(self) -> List[types.newtonManip]: ...

class nexManipCollector(_NodeCollector):
    def collect(self) -> List[types.nexManip]: ...

class nodeGraphEditorBookmarkInfoCollector(_NodeCollector):
    def collect(self) -> List[types.nodeGraphEditorBookmarkInfo]: ...

class nodeGraphEditorBookmarksCollector(_NodeCollector):
    def collect(self) -> List[types.nodeGraphEditorBookmarks]: ...

class nodeGraphEditorInfoCollector(_NodeCollector):
    def collect(self) -> List[types.nodeGraphEditorInfo]: ...

class noiseCollector(_NodeCollector):
    def collect(self) -> List[types.noise]: ...

class nonLinearCollector(_NodeCollector):
    def collect(self) -> List[types.nonLinear]: ...

class normalConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.normalConstraint]: ...

class normalizeCollector(_NodeCollector):
    def collect(self) -> List[types.normalize]: ...

class not_Collector(_NodeCollector):
    def collect(self) -> List[types.not_]: ...

class nucleusCollector(_NodeCollector):
    def collect(self) -> List[types.nucleus]: ...

class nurbsCurveCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsCurve]: ...

class nurbsCurveToBezierCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsCurveToBezier]: ...

class nurbsSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsSurface]: ...

class nurbsTessellateCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsTessellate]: ...

class nurbsToSubdivCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsToSubdiv]: ...

class nurbsToSubdivProcCollector(_NodeCollector):
    def collect(self) -> List[types.nurbsToSubdivProc]: ...

class objectAttrFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectAttrFilter]: ...

class objectBinFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectBinFilter]: ...

class objectFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectFilter]: ...

class objectGrpToCompCollector(_NodeCollector):
    def collect(self) -> List[types.objectGrpToComp]: ...

class objectMultiFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectMultiFilter]: ...

class objectNameFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectNameFilter]: ...

class objectRenderFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectRenderFilter]: ...

class objectScriptFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectScriptFilter]: ...

class objectSetCollector(_NodeCollector):
    def collect(self) -> List[types.objectSet]: ...

class objectTypeFilterCollector(_NodeCollector):
    def collect(self) -> List[types.objectTypeFilter]: ...

class oceanCollector(_NodeCollector):
    def collect(self) -> List[types.ocean]: ...

class oceanShaderCollector(_NodeCollector):
    def collect(self) -> List[types.oceanShader]: ...

class offsetCosCollector(_NodeCollector):
    def collect(self) -> List[types.offsetCos]: ...

class offsetCosManipCollector(_NodeCollector):
    def collect(self) -> List[types.offsetCosManip]: ...

class offsetCurveCollector(_NodeCollector):
    def collect(self) -> List[types.offsetCurve]: ...

class offsetCurveManipCollector(_NodeCollector):
    def collect(self) -> List[types.offsetCurveManip]: ...

class offsetDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.offsetDeformer]: ...

class offsetSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.offsetSurface]: ...

class offsetSurfaceManipCollector(_NodeCollector):
    def collect(self) -> List[types.offsetSurfaceManip]: ...

class oldBlindDataBaseCollector(_NodeCollector):
    def collect(self) -> List[types.oldBlindDataBase]: ...

class oldGeometryConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.oldGeometryConstraint]: ...

class oldNormalConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.oldNormalConstraint]: ...

class oldTangentConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.oldTangentConstraint]: ...

class opticalFXCollector(_NodeCollector):
    def collect(self) -> List[types.opticalFX]: ...

class or_Collector(_NodeCollector):
    def collect(self) -> List[types.or_]: ...

class orientConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.orientConstraint]: ...

class orientationMarkerCollector(_NodeCollector):
    def collect(self) -> List[types.orientationMarker]: ...

class overrideCollector(_NodeCollector):
    def collect(self) -> List[types.override]: ...

class pairBlendCollector(_NodeCollector):
    def collect(self) -> List[types.pairBlend]: ...

class paramDimensionCollector(_NodeCollector):
    def collect(self) -> List[types.paramDimension]: ...

class parentConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.parentConstraint]: ...

class parentMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.parentMatrix]: ...

class particleCollector(_NodeCollector):
    def collect(self) -> List[types.particle]: ...

class particleAgeMapperCollector(_NodeCollector):
    def collect(self) -> List[types.particleAgeMapper]: ...

class particleCloudCollector(_NodeCollector):
    def collect(self) -> List[types.particleCloud]: ...

class particleColorMapperCollector(_NodeCollector):
    def collect(self) -> List[types.particleColorMapper]: ...

class particleIncandMapperCollector(_NodeCollector):
    def collect(self) -> List[types.particleIncandMapper]: ...

class particleSamplerInfoCollector(_NodeCollector):
    def collect(self) -> List[types.particleSamplerInfo]: ...

class particleTranspMapperCollector(_NodeCollector):
    def collect(self) -> List[types.particleTranspMapper]: ...

class partitionCollector(_NodeCollector):
    def collect(self) -> List[types.partition]: ...

class passContributionMapCollector(_NodeCollector):
    def collect(self) -> List[types.passContributionMap]: ...

class passMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.passMatrix]: ...

class pfxHairCollector(_NodeCollector):
    def collect(self) -> List[types.pfxHair]: ...

class pfxToonCollector(_NodeCollector):
    def collect(self) -> List[types.pfxToon]: ...

class phongCollector(_NodeCollector):
    def collect(self) -> List[types.phong]: ...

class phongECollector(_NodeCollector):
    def collect(self) -> List[types.phongE]: ...

class piCollector(_NodeCollector):
    def collect(self) -> List[types.pi]: ...

class pickMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.pickMatrix]: ...

class pivot2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.pivot2dManip]: ...

class pivotAndOrientManipCollector(_NodeCollector):
    def collect(self) -> List[types.pivotAndOrientManip]: ...

class place2dTextureCollector(_NodeCollector):
    def collect(self) -> List[types.place2dTexture]: ...

class place3dTextureCollector(_NodeCollector):
    def collect(self) -> List[types.place3dTexture]: ...

class placerToolCollector(_NodeCollector):
    def collect(self) -> List[types.placerTool]: ...

class planarProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.planarProjManip]: ...

class planarTrimSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.planarTrimSurface]: ...

class plusMinusAverageCollector(_NodeCollector):
    def collect(self) -> List[types.plusMinusAverage]: ...

class pointConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.pointConstraint]: ...

class pointEmitterCollector(_NodeCollector):
    def collect(self) -> List[types.pointEmitter]: ...

class pointLightCollector(_NodeCollector):
    def collect(self) -> List[types.pointLight]: ...

class pointMatrixMultCollector(_NodeCollector):
    def collect(self) -> List[types.pointMatrixMult]: ...

class pointOnCurveInfoCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnCurveInfo]: ...

class pointOnCurveManipCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnCurveManip]: ...

class pointOnLineManipCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnLineManip]: ...

class pointOnPolyConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnPolyConstraint]: ...

class pointOnSurfManipCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnSurfManip]: ...

class pointOnSurfaceInfoCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnSurfaceInfo]: ...

class pointOnSurfaceManipCollector(_NodeCollector):
    def collect(self) -> List[types.pointOnSurfaceManip]: ...

class poleVectorConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.poleVectorConstraint]: ...

class polyAppendCollector(_NodeCollector):
    def collect(self) -> List[types.polyAppend]: ...

class polyAppendVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyAppendVertex]: ...

class polyAutoProjCollector(_NodeCollector):
    def collect(self) -> List[types.polyAutoProj]: ...

class polyAutoProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyAutoProjManip]: ...

class polyAverageVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyAverageVertex]: ...

class polyAxisCollector(_NodeCollector):
    def collect(self) -> List[types.polyAxis]: ...

class polyBevelCollector(_NodeCollector):
    def collect(self) -> List[types.polyBevel]: ...

class polyBevel2Collector(_NodeCollector):
    def collect(self) -> List[types.polyBevel2]: ...

class polyBevel3Collector(_NodeCollector):
    def collect(self) -> List[types.polyBevel3]: ...

class polyBlindDataCollector(_NodeCollector):
    def collect(self) -> List[types.polyBlindData]: ...

class polyBoolOpCollector(_NodeCollector):
    def collect(self) -> List[types.polyBoolOp]: ...

class polyBooleanCollector(_NodeCollector):
    def collect(self) -> List[types.polyBoolean]: ...

class polyBridgeEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyBridgeEdge]: ...

class polyCBoolOpCollector(_NodeCollector):
    def collect(self) -> List[types.polyCBoolOp]: ...

class polyCaddyManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyCaddyManip]: ...

class polyChipOffCollector(_NodeCollector):
    def collect(self) -> List[types.polyChipOff]: ...

class polyCircularizeCollector(_NodeCollector):
    def collect(self) -> List[types.polyCircularize]: ...

class polyCleanCollector(_NodeCollector):
    def collect(self) -> List[types.polyClean]: ...

class polyCloseBorderCollector(_NodeCollector):
    def collect(self) -> List[types.polyCloseBorder]: ...

class polyCollapseEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyCollapseEdge]: ...

class polyCollapseFCollector(_NodeCollector):
    def collect(self) -> List[types.polyCollapseF]: ...

class polyColorDelCollector(_NodeCollector):
    def collect(self) -> List[types.polyColorDel]: ...

class polyColorModCollector(_NodeCollector):
    def collect(self) -> List[types.polyColorMod]: ...

class polyColorPerVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyColorPerVertex]: ...

class polyConeCollector(_NodeCollector):
    def collect(self) -> List[types.polyCone]: ...

class polyConnectComponentsCollector(_NodeCollector):
    def collect(self) -> List[types.polyConnectComponents]: ...

class polyContourProjCollector(_NodeCollector):
    def collect(self) -> List[types.polyContourProj]: ...

class polyCopyUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyCopyUV]: ...

class polyCreaseCollector(_NodeCollector):
    def collect(self) -> List[types.polyCrease]: ...

class polyCreaseEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyCreaseEdge]: ...

class polyCreateFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyCreateFace]: ...

class polyCreateToolManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyCreateToolManip]: ...

class polyCubeCollector(_NodeCollector):
    def collect(self) -> List[types.polyCube]: ...

class polyCutCollector(_NodeCollector):
    def collect(self) -> List[types.polyCut]: ...

class polyCutManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyCutManip]: ...

class polyCutManipContainerCollector(_NodeCollector):
    def collect(self) -> List[types.polyCutManipContainer]: ...

class polyCylProjCollector(_NodeCollector):
    def collect(self) -> List[types.polyCylProj]: ...

class polyCylinderCollector(_NodeCollector):
    def collect(self) -> List[types.polyCylinder]: ...

class polyDelEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyDelEdge]: ...

class polyDelFacetCollector(_NodeCollector):
    def collect(self) -> List[types.polyDelFacet]: ...

class polyDelVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyDelVertex]: ...

class polyDiscCollector(_NodeCollector):
    def collect(self) -> List[types.polyDisc]: ...

class polyDuplicateEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyDuplicateEdge]: ...

class polyEdgeToCurveCollector(_NodeCollector):
    def collect(self) -> List[types.polyEdgeToCurve]: ...

class polyEditEdgeFlowCollector(_NodeCollector):
    def collect(self) -> List[types.polyEditEdgeFlow]: ...

class polyExtrudeEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyExtrudeEdge]: ...

class polyExtrudeFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyExtrudeFace]: ...

class polyExtrudeVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyExtrudeVertex]: ...

class polyFlipEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyFlipEdge]: ...

class polyFlipUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyFlipUV]: ...

class polyGearCollector(_NodeCollector):
    def collect(self) -> List[types.polyGear]: ...

class polyHelixCollector(_NodeCollector):
    def collect(self) -> List[types.polyHelix]: ...

class polyHoleFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyHoleFace]: ...

class polyLayoutUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyLayoutUV]: ...

class polyMapCutCollector(_NodeCollector):
    def collect(self) -> List[types.polyMapCut]: ...

class polyMapDelCollector(_NodeCollector):
    def collect(self) -> List[types.polyMapDel]: ...

class polyMapSewCollector(_NodeCollector):
    def collect(self) -> List[types.polyMapSew]: ...

class polyMapSewMoveCollector(_NodeCollector):
    def collect(self) -> List[types.polyMapSewMove]: ...

class polyMappingManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyMappingManip]: ...

class polyMergeEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyMergeEdge]: ...

class polyMergeFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyMergeFace]: ...

class polyMergeUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyMergeUV]: ...

class polyMergeVertCollector(_NodeCollector):
    def collect(self) -> List[types.polyMergeVert]: ...

class polyMergeVertsManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyMergeVertsManip]: ...

class polyMirrorCollector(_NodeCollector):
    def collect(self) -> List[types.polyMirror]: ...

class polyMirrorManipContainerCollector(_NodeCollector):
    def collect(self) -> List[types.polyMirrorManipContainer]: ...

class polyModifierManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyModifierManip]: ...

class polyModifierManipContainerCollector(_NodeCollector):
    def collect(self) -> List[types.polyModifierManipContainer]: ...

class polyMoveEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveEdge]: ...

class polyMoveFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveFace]: ...

class polyMoveFacetUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveFacetUV]: ...

class polyMoveUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveUV]: ...

class polyMoveUVManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveUVManip]: ...

class polyMoveVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveVertex]: ...

class polyMoveVertexManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyMoveVertexManip]: ...

class polyNormalCollector(_NodeCollector):
    def collect(self) -> List[types.polyNormal]: ...

class polyNormalPerVertexCollector(_NodeCollector):
    def collect(self) -> List[types.polyNormalPerVertex]: ...

class polyNormalizeUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyNormalizeUV]: ...

class polyOptUvsCollector(_NodeCollector):
    def collect(self) -> List[types.polyOptUvs]: ...

class polyPassThruCollector(_NodeCollector):
    def collect(self) -> List[types.polyPassThru]: ...

class polyPinUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyPinUV]: ...

class polyPipeCollector(_NodeCollector):
    def collect(self) -> List[types.polyPipe]: ...

class polyPlanarProjCollector(_NodeCollector):
    def collect(self) -> List[types.polyPlanarProj]: ...

class polyPlaneCollector(_NodeCollector):
    def collect(self) -> List[types.polyPlane]: ...

class polyPlatonicCollector(_NodeCollector):
    def collect(self) -> List[types.polyPlatonic]: ...

class polyPlatonicSolidCollector(_NodeCollector):
    def collect(self) -> List[types.polyPlatonicSolid]: ...

class polyPokeCollector(_NodeCollector):
    def collect(self) -> List[types.polyPoke]: ...

class polyPokeManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyPokeManip]: ...

class polyPrimitiveMiscCollector(_NodeCollector):
    def collect(self) -> List[types.polyPrimitiveMisc]: ...

class polyPrismCollector(_NodeCollector):
    def collect(self) -> List[types.polyPrism]: ...

class polyProjCollector(_NodeCollector):
    def collect(self) -> List[types.polyProj]: ...

class polyProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyProjManip]: ...

class polyProjectCurveCollector(_NodeCollector):
    def collect(self) -> List[types.polyProjectCurve]: ...

class polyPyramidCollector(_NodeCollector):
    def collect(self) -> List[types.polyPyramid]: ...

class polyQuadCollector(_NodeCollector):
    def collect(self) -> List[types.polyQuad]: ...

class polyReFormManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyReFormManip]: ...

class polyReFormManipContainerCollector(_NodeCollector):
    def collect(self) -> List[types.polyReFormManipContainer]: ...

class polyReduceCollector(_NodeCollector):
    def collect(self) -> List[types.polyReduce]: ...

class polyRemeshCollector(_NodeCollector):
    def collect(self) -> List[types.polyRemesh]: ...

class polyRetopoCollector(_NodeCollector):
    def collect(self) -> List[types.polyRetopo]: ...

class polySelectEditFeedbackManipCollector(_NodeCollector):
    def collect(self) -> List[types.polySelectEditFeedbackManip]: ...

class polySeparateCollector(_NodeCollector):
    def collect(self) -> List[types.polySeparate]: ...

class polySewEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polySewEdge]: ...

class polySmoothCollector(_NodeCollector):
    def collect(self) -> List[types.polySmooth]: ...

class polySmoothFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polySmoothFace]: ...

class polySmoothProxyCollector(_NodeCollector):
    def collect(self) -> List[types.polySmoothProxy]: ...

class polySoftEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polySoftEdge]: ...

class polySphProjCollector(_NodeCollector):
    def collect(self) -> List[types.polySphProj]: ...

class polySphereCollector(_NodeCollector):
    def collect(self) -> List[types.polySphere]: ...

class polySpinEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polySpinEdge]: ...

class polySplitCollector(_NodeCollector):
    def collect(self) -> List[types.polySplit]: ...

class polySplitEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polySplitEdge]: ...

class polySplitRingCollector(_NodeCollector):
    def collect(self) -> List[types.polySplitRing]: ...

class polySplitToolManip1Collector(_NodeCollector):
    def collect(self) -> List[types.polySplitToolManip1]: ...

class polySplitVertCollector(_NodeCollector):
    def collect(self) -> List[types.polySplitVert]: ...

class polyStraightenUVBorderCollector(_NodeCollector):
    def collect(self) -> List[types.polyStraightenUVBorder]: ...

class polySubdEdgeCollector(_NodeCollector):
    def collect(self) -> List[types.polySubdEdge]: ...

class polySubdFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polySubdFace]: ...

class polySuperShapeCollector(_NodeCollector):
    def collect(self) -> List[types.polySuperShape]: ...

class polyToSubdivCollector(_NodeCollector):
    def collect(self) -> List[types.polyToSubdiv]: ...

class polyToolFeedbackManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyToolFeedbackManip]: ...

class polyTorusCollector(_NodeCollector):
    def collect(self) -> List[types.polyTorus]: ...

class polyTransferCollector(_NodeCollector):
    def collect(self) -> List[types.polyTransfer]: ...

class polyTriangulateCollector(_NodeCollector):
    def collect(self) -> List[types.polyTriangulate]: ...

class polyTweakCollector(_NodeCollector):
    def collect(self) -> List[types.polyTweak]: ...

class polyTweakUVCollector(_NodeCollector):
    def collect(self) -> List[types.polyTweakUV]: ...

class polyUVRectangleCollector(_NodeCollector):
    def collect(self) -> List[types.polyUVRectangle]: ...

class polyUniteCollector(_NodeCollector):
    def collect(self) -> List[types.polyUnite]: ...

class polyUnsmoothCollector(_NodeCollector):
    def collect(self) -> List[types.polyUnsmooth]: ...

class polyVertexNormalManipCollector(_NodeCollector):
    def collect(self) -> List[types.polyVertexNormalManip]: ...

class polyWedgeFaceCollector(_NodeCollector):
    def collect(self) -> List[types.polyWedgeFace]: ...

class poseInterpolatorCollector(_NodeCollector):
    def collect(self) -> List[types.poseInterpolator]: ...

class poseInterpolatorManagerCollector(_NodeCollector):
    def collect(self) -> List[types.poseInterpolatorManager]: ...

class positionMarkerCollector(_NodeCollector):
    def collect(self) -> List[types.positionMarker]: ...

class postProcessListCollector(_NodeCollector):
    def collect(self) -> List[types.postProcessList]: ...

class powerCollector(_NodeCollector):
    def collect(self) -> List[types.power]: ...

class precompExportCollector(_NodeCollector):
    def collect(self) -> List[types.precompExport]: ...

class premultiplyCollector(_NodeCollector):
    def collect(self) -> List[types.premultiply]: ...

class primitiveFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.primitiveFalloff]: ...

class projectCurveCollector(_NodeCollector):
    def collect(self) -> List[types.projectCurve]: ...

class projectTangentCollector(_NodeCollector):
    def collect(self) -> List[types.projectTangent]: ...

class projectTangentManipCollector(_NodeCollector):
    def collect(self) -> List[types.projectTangentManip]: ...

class projectionCollector(_NodeCollector):
    def collect(self) -> List[types.projection]: ...

class projectionManipCollector(_NodeCollector):
    def collect(self) -> List[types.projectionManip]: ...

class projectionMultiManipCollector(_NodeCollector):
    def collect(self) -> List[types.projectionMultiManip]: ...

class projectionUVManipCollector(_NodeCollector):
    def collect(self) -> List[types.projectionUVManip]: ...

class propModManipCollector(_NodeCollector):
    def collect(self) -> List[types.propModManip]: ...

class propMoveTriadManipCollector(_NodeCollector):
    def collect(self) -> List[types.propMoveTriadManip]: ...

class proximityFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.proximityFalloff]: ...

class proximityPinCollector(_NodeCollector):
    def collect(self) -> List[types.proximityPin]: ...

class proximityWrapCollector(_NodeCollector):
    def collect(self) -> List[types.proximityWrap]: ...

class proxyManagerCollector(_NodeCollector):
    def collect(self) -> List[types.proxyManager]: ...

class psdFileTexCollector(_NodeCollector):
    def collect(self) -> List[types.psdFileTex]: ...

class pxrHdImagingShapeCollector(_NodeCollector):
    def collect(self) -> List[types.pxrHdImagingShape]: ...

class pxrUsdPointBasedDeformerNodeCollector(_NodeCollector):
    def collect(self) -> List[types.pxrUsdPointBasedDeformerNode]: ...

class pxrUsdStageNodeCollector(_NodeCollector):
    def collect(self) -> List[types.pxrUsdStageNode]: ...

class quadPtOnLineManipCollector(_NodeCollector):
    def collect(self) -> List[types.quadPtOnLineManip]: ...

class quadShadingSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.quadShadingSwitch]: ...

class quatAddCollector(_NodeCollector):
    def collect(self) -> List[types.quatAdd]: ...

class quatConjugateCollector(_NodeCollector):
    def collect(self) -> List[types.quatConjugate]: ...

class quatInvertCollector(_NodeCollector):
    def collect(self) -> List[types.quatInvert]: ...

class quatNegateCollector(_NodeCollector):
    def collect(self) -> List[types.quatNegate]: ...

class quatNormalizeCollector(_NodeCollector):
    def collect(self) -> List[types.quatNormalize]: ...

class quatProdCollector(_NodeCollector):
    def collect(self) -> List[types.quatProd]: ...

class quatSlerpCollector(_NodeCollector):
    def collect(self) -> List[types.quatSlerp]: ...

class quatSubCollector(_NodeCollector):
    def collect(self) -> List[types.quatSub]: ...

class quatToAxisAngleCollector(_NodeCollector):
    def collect(self) -> List[types.quatToAxisAngle]: ...

class quatToEulerCollector(_NodeCollector):
    def collect(self) -> List[types.quatToEuler]: ...

class radialFieldCollector(_NodeCollector):
    def collect(self) -> List[types.radialField]: ...

class rampCollector(_NodeCollector):
    def collect(self) -> List[types.ramp]: ...

class rampShaderCollector(_NodeCollector):
    def collect(self) -> List[types.rampShader]: ...

class rbfSrfCollector(_NodeCollector):
    def collect(self) -> List[types.rbfSrf]: ...

class rbfSrfManipCollector(_NodeCollector):
    def collect(self) -> List[types.rbfSrfManip]: ...

class rebuildCurveCollector(_NodeCollector):
    def collect(self) -> List[types.rebuildCurve]: ...

class rebuildSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.rebuildSurface]: ...

class recordCollector(_NodeCollector):
    def collect(self) -> List[types.record]: ...

class referenceCollector(_NodeCollector):
    def collect(self) -> List[types.reference]: ...

class relOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.relOverride]: ...

class relUniqueOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.relUniqueOverride]: ...

class remapColorCollector(_NodeCollector):
    def collect(self) -> List[types.remapColor]: ...

class remapHsvCollector(_NodeCollector):
    def collect(self) -> List[types.remapHsv]: ...

class remapValueCollector(_NodeCollector):
    def collect(self) -> List[types.remapValue]: ...

class renderBoxCollector(_NodeCollector):
    def collect(self) -> List[types.renderBox]: ...

class renderConeCollector(_NodeCollector):
    def collect(self) -> List[types.renderCone]: ...

class renderGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.renderGlobals]: ...

class renderGlobalsListCollector(_NodeCollector):
    def collect(self) -> List[types.renderGlobalsList]: ...

class renderLayerCollector(_NodeCollector):
    def collect(self) -> List[types.renderLayer]: ...

class renderLayerManagerCollector(_NodeCollector):
    def collect(self) -> List[types.renderLayerManager]: ...

class renderPassCollector(_NodeCollector):
    def collect(self) -> List[types.renderPass]: ...

class renderPassSetCollector(_NodeCollector):
    def collect(self) -> List[types.renderPassSet]: ...

class renderQualityCollector(_NodeCollector):
    def collect(self) -> List[types.renderQuality]: ...

class renderRectCollector(_NodeCollector):
    def collect(self) -> List[types.renderRect]: ...

class renderSettingsChildCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.renderSettingsChildCollection]: ...

class renderSettingsCollectionCollector(_NodeCollector):
    def collect(self) -> List[types.renderSettingsCollection]: ...

class renderSetupCollector(_NodeCollector):
    def collect(self) -> List[types.renderSetup]: ...

class renderSetupLayerCollector(_NodeCollector):
    def collect(self) -> List[types.renderSetupLayer]: ...

class renderSphereCollector(_NodeCollector):
    def collect(self) -> List[types.renderSphere]: ...

class renderTargetCollector(_NodeCollector):
    def collect(self) -> List[types.renderTarget]: ...

class renderedImageSourceCollector(_NodeCollector):
    def collect(self) -> List[types.renderedImageSource]: ...

class reorderUVSetCollector(_NodeCollector):
    def collect(self) -> List[types.reorderUVSet]: ...

class resolutionCollector(_NodeCollector):
    def collect(self) -> List[types.resolution]: ...

class resultCurveTimeToAngularCollector(_NodeCollector):
    def collect(self) -> List[types.resultCurveTimeToAngular]: ...

class resultCurveTimeToLinearCollector(_NodeCollector):
    def collect(self) -> List[types.resultCurveTimeToLinear]: ...

class resultCurveTimeToTimeCollector(_NodeCollector):
    def collect(self) -> List[types.resultCurveTimeToTime]: ...

class resultCurveTimeToUnitlessCollector(_NodeCollector):
    def collect(self) -> List[types.resultCurveTimeToUnitless]: ...

class reverseCollector(_NodeCollector):
    def collect(self) -> List[types.reverse]: ...

class reverseCurveCollector(_NodeCollector):
    def collect(self) -> List[types.reverseCurve]: ...

class reverseCurveManipCollector(_NodeCollector):
    def collect(self) -> List[types.reverseCurveManip]: ...

class reverseSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.reverseSurface]: ...

class reverseSurfaceManipCollector(_NodeCollector):
    def collect(self) -> List[types.reverseSurfaceManip]: ...

class revolveCollector(_NodeCollector):
    def collect(self) -> List[types.revolve]: ...

class revolveManipCollector(_NodeCollector):
    def collect(self) -> List[types.revolveManip]: ...

class revolvedPrimitiveManipCollector(_NodeCollector):
    def collect(self) -> List[types.revolvedPrimitiveManip]: ...

class rgbToHsvCollector(_NodeCollector):
    def collect(self) -> List[types.rgbToHsv]: ...

class rigidBodyCollector(_NodeCollector):
    def collect(self) -> List[types.rigidBody]: ...

class rigidConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.rigidConstraint]: ...

class rigidSolverCollector(_NodeCollector):
    def collect(self) -> List[types.rigidSolver]: ...

class rockCollector(_NodeCollector):
    def collect(self) -> List[types.rock]: ...

class rotateHelperCollector(_NodeCollector):
    def collect(self) -> List[types.rotateHelper]: ...

class rotateLimitsManipCollector(_NodeCollector):
    def collect(self) -> List[types.rotateLimitsManip]: ...

class rotateManipCollector(_NodeCollector):
    def collect(self) -> List[types.rotateManip]: ...

class rotateUV2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.rotateUV2dManip]: ...

class rotateVectorCollector(_NodeCollector):
    def collect(self) -> List[types.rotateVector]: ...

class rotationFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.rotationFromMatrix]: ...

class roundCollector(_NodeCollector):
    def collect(self) -> List[types.round]: ...

class roundConstantRadiusCollector(_NodeCollector):
    def collect(self) -> List[types.roundConstantRadius]: ...

class roundConstantRadiusManipCollector(_NodeCollector):
    def collect(self) -> List[types.roundConstantRadiusManip]: ...

class roundRadiusCrvManipCollector(_NodeCollector):
    def collect(self) -> List[types.roundRadiusCrvManip]: ...

class roundRadiusManipCollector(_NodeCollector):
    def collect(self) -> List[types.roundRadiusManip]: ...

class rowFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.rowFromMatrix]: ...

class samplerCollector(_NodeCollector):
    def collect(self) -> List[types.sampler]: ...

class samplerInfoCollector(_NodeCollector):
    def collect(self) -> List[types.samplerInfo]: ...

class scaleConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.scaleConstraint]: ...

class scaleFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.scaleFromMatrix]: ...

class scaleLimitsManipCollector(_NodeCollector):
    def collect(self) -> List[types.scaleLimitsManip]: ...

class scaleManipCollector(_NodeCollector):
    def collect(self) -> List[types.scaleManip]: ...

class scaleUV2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.scaleUV2dManip]: ...

class screenAlignedCircleManipCollector(_NodeCollector):
    def collect(self) -> List[types.screenAlignedCircleManip]: ...

class scriptCollector(_NodeCollector):
    def collect(self) -> List[types.script]: ...

class scriptManipCollector(_NodeCollector):
    def collect(self) -> List[types.scriptManip]: ...

class sculptCollector(_NodeCollector):
    def collect(self) -> List[types.sculpt]: ...

class selectionListOperatorCollector(_NodeCollector):
    def collect(self) -> List[types.selectionListOperator]: ...

class selectorCollector(_NodeCollector):
    def collect(self) -> List[types.selector]: ...

class sequenceManagerCollector(_NodeCollector):
    def collect(self) -> List[types.sequenceManager]: ...

class sequencerCollector(_NodeCollector):
    def collect(self) -> List[types.sequencer]: ...

class setRangeCollector(_NodeCollector):
    def collect(self) -> List[types.setRange]: ...

class shaderGlowCollector(_NodeCollector):
    def collect(self) -> List[types.shaderGlow]: ...

class shaderOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.shaderOverride]: ...

class shadingEngineCollector(_NodeCollector):
    def collect(self) -> List[types.shadingEngine]: ...

class shadingMapCollector(_NodeCollector):
    def collect(self) -> List[types.shadingMap]: ...

class shapeEditorManagerCollector(_NodeCollector):
    def collect(self) -> List[types.shapeEditorManager]: ...

class shellDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.shellDeformer]: ...

class shellTessellateCollector(_NodeCollector):
    def collect(self) -> List[types.shellTessellate]: ...

class shotCollector(_NodeCollector):
    def collect(self) -> List[types.shot]: ...

class shrinkWrapCollector(_NodeCollector):
    def collect(self) -> List[types.shrinkWrap]: ...

class simpleSelectorCollector(_NodeCollector):
    def collect(self) -> List[types.simpleSelector]: ...

class simpleTestNodeCollector(_NodeCollector):
    def collect(self) -> List[types.simpleTestNode]: ...

class simpleVolumeShaderCollector(_NodeCollector):
    def collect(self) -> List[types.simpleVolumeShader]: ...

class simplexNoiseCollector(_NodeCollector):
    def collect(self) -> List[types.simplexNoise]: ...

class sinCollector(_NodeCollector):
    def collect(self) -> List[types.sin]: ...

class singleShadingSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.singleShadingSwitch]: ...

class sketchPlaneCollector(_NodeCollector):
    def collect(self) -> List[types.sketchPlane]: ...

class skinBindingCollector(_NodeCollector):
    def collect(self) -> List[types.skinBinding]: ...

class skinClusterCollector(_NodeCollector):
    def collect(self) -> List[types.skinCluster]: ...

class smoothCurveCollector(_NodeCollector):
    def collect(self) -> List[types.smoothCurve]: ...

class smoothStepCollector(_NodeCollector):
    def collect(self) -> List[types.smoothStep]: ...

class smoothTangentSrfCollector(_NodeCollector):
    def collect(self) -> List[types.smoothTangentSrf]: ...

class snapUV2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.snapUV2dManip]: ...

class snapshotCollector(_NodeCollector):
    def collect(self) -> List[types.snapshot]: ...

class snapshotShapeCollector(_NodeCollector):
    def collect(self) -> List[types.snapshotShape]: ...

class snowCollector(_NodeCollector):
    def collect(self) -> List[types.snow]: ...

class softModCollector(_NodeCollector):
    def collect(self) -> List[types.softMod]: ...

class softModHandleCollector(_NodeCollector):
    def collect(self) -> List[types.softModHandle]: ...

class softModManipCollector(_NodeCollector):
    def collect(self) -> List[types.softModManip]: ...

class solidFractalCollector(_NodeCollector):
    def collect(self) -> List[types.solidFractal]: ...

class solidifyCollector(_NodeCollector):
    def collect(self) -> List[types.solidify]: ...

class spBirailSrfCollector(_NodeCollector):
    def collect(self) -> List[types.spBirailSrf]: ...

class sphericalProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.sphericalProjManip]: ...

class spotCylinderManipCollector(_NodeCollector):
    def collect(self) -> List[types.spotCylinderManip]: ...

class spotLightCollector(_NodeCollector):
    def collect(self) -> List[types.spotLight]: ...

class spotManipCollector(_NodeCollector):
    def collect(self) -> List[types.spotManip]: ...

class springCollector(_NodeCollector):
    def collect(self) -> List[types.spring]: ...

class squareSrfCollector(_NodeCollector):
    def collect(self) -> List[types.squareSrf]: ...

class squareSrfManipCollector(_NodeCollector):
    def collect(self) -> List[types.squareSrfManip]: ...

class standardSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.standardSurface]: ...

class stencilCollector(_NodeCollector):
    def collect(self) -> List[types.stencil]: ...

class stereoRigCameraCollector(_NodeCollector):
    def collect(self) -> List[types.stereoRigCamera]: ...

class stitchAsNurbsShellCollector(_NodeCollector):
    def collect(self) -> List[types.stitchAsNurbsShell]: ...

class stitchSrfCollector(_NodeCollector):
    def collect(self) -> List[types.stitchSrf]: ...

class stitchSrfManipCollector(_NodeCollector):
    def collect(self) -> List[types.stitchSrfManip]: ...

class strokeCollector(_NodeCollector):
    def collect(self) -> List[types.stroke]: ...

class strokeGlobalsCollector(_NodeCollector):
    def collect(self) -> List[types.strokeGlobals]: ...

class stuccoCollector(_NodeCollector):
    def collect(self) -> List[types.stucco]: ...

class styleCurveCollector(_NodeCollector):
    def collect(self) -> List[types.styleCurve]: ...

class subCurveCollector(_NodeCollector):
    def collect(self) -> List[types.subCurve]: ...

class subSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.subSurface]: ...

class subdAddTopologyCollector(_NodeCollector):
    def collect(self) -> List[types.subdAddTopology]: ...

class subdAutoProjCollector(_NodeCollector):
    def collect(self) -> List[types.subdAutoProj]: ...

class subdBlindDataCollector(_NodeCollector):
    def collect(self) -> List[types.subdBlindData]: ...

class subdCleanTopologyCollector(_NodeCollector):
    def collect(self) -> List[types.subdCleanTopology]: ...

class subdHierBlindCollector(_NodeCollector):
    def collect(self) -> List[types.subdHierBlind]: ...

class subdLayoutUVCollector(_NodeCollector):
    def collect(self) -> List[types.subdLayoutUV]: ...

class subdMapCutCollector(_NodeCollector):
    def collect(self) -> List[types.subdMapCut]: ...

class subdMapSewMoveCollector(_NodeCollector):
    def collect(self) -> List[types.subdMapSewMove]: ...

class subdMappingManipCollector(_NodeCollector):
    def collect(self) -> List[types.subdMappingManip]: ...

class subdPlanarProjCollector(_NodeCollector):
    def collect(self) -> List[types.subdPlanarProj]: ...

class subdProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.subdProjManip]: ...

class subdTweakCollector(_NodeCollector):
    def collect(self) -> List[types.subdTweak]: ...

class subdTweakUVCollector(_NodeCollector):
    def collect(self) -> List[types.subdTweakUV]: ...

class subdivCollector(_NodeCollector):
    def collect(self) -> List[types.subdiv]: ...

class subdivCollapseCollector(_NodeCollector):
    def collect(self) -> List[types.subdivCollapse]: ...

class subdivComponentIdCollector(_NodeCollector):
    def collect(self) -> List[types.subdivComponentId]: ...

class subdivReverseFacesCollector(_NodeCollector):
    def collect(self) -> List[types.subdivReverseFaces]: ...

class subdivSurfaceVarGroupCollector(_NodeCollector):
    def collect(self) -> List[types.subdivSurfaceVarGroup]: ...

class subdivToNurbsCollector(_NodeCollector):
    def collect(self) -> List[types.subdivToNurbs]: ...

class subdivToPolyCollector(_NodeCollector):
    def collect(self) -> List[types.subdivToPoly]: ...

class subsetFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.subsetFalloff]: ...

class subtractCollector(_NodeCollector):
    def collect(self) -> List[types.subtract]: ...

class sumCollector(_NodeCollector):
    def collect(self) -> List[types.sum]: ...

class surfaceEdManipCollector(_NodeCollector):
    def collect(self) -> List[types.surfaceEdManip]: ...

class surfaceInfoCollector(_NodeCollector):
    def collect(self) -> List[types.surfaceInfo]: ...

class surfaceLuminanceCollector(_NodeCollector):
    def collect(self) -> List[types.surfaceLuminance]: ...

class surfaceShaderCollector(_NodeCollector):
    def collect(self) -> List[types.surfaceShader]: ...

class surfaceVarGroupCollector(_NodeCollector):
    def collect(self) -> List[types.surfaceVarGroup]: ...

class svgToPolyCollector(_NodeCollector):
    def collect(self) -> List[types.svgToPoly]: ...

class sweepMeshCreatorCollector(_NodeCollector):
    def collect(self) -> List[types.sweepMeshCreator]: ...

class sweepProfileConverterCollector(_NodeCollector):
    def collect(self) -> List[types.sweepProfileConverter]: ...

class symmetryConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.symmetryConstraint]: ...

class tanCollector(_NodeCollector):
    def collect(self) -> List[types.tan]: ...

class tangentConstraintCollector(_NodeCollector):
    def collect(self) -> List[types.tangentConstraint]: ...

class tensionCollector(_NodeCollector):
    def collect(self) -> List[types.tension]: ...

class texLatticeCollector(_NodeCollector):
    def collect(self) -> List[types.texLattice]: ...

class texLatticeDeformManipCollector(_NodeCollector):
    def collect(self) -> List[types.texLatticeDeformManip]: ...

class texMoveShellManipCollector(_NodeCollector):
    def collect(self) -> List[types.texMoveShellManip]: ...

class texSmoothManipCollector(_NodeCollector):
    def collect(self) -> List[types.texSmoothManip]: ...

class texSmudgeUVManipCollector(_NodeCollector):
    def collect(self) -> List[types.texSmudgeUVManip]: ...

class textButtonManipCollector(_NodeCollector):
    def collect(self) -> List[types.textButtonManip]: ...

class textManip2DCollector(_NodeCollector):
    def collect(self) -> List[types.textManip2D]: ...

class texture3dManipCollector(_NodeCollector):
    def collect(self) -> List[types.texture3dManip]: ...

class textureBakeSetCollector(_NodeCollector):
    def collect(self) -> List[types.textureBakeSet]: ...

class textureDeformerCollector(_NodeCollector):
    def collect(self) -> List[types.textureDeformer]: ...

class textureDeformerHandleCollector(_NodeCollector):
    def collect(self) -> List[types.textureDeformerHandle]: ...

class textureToGeomCollector(_NodeCollector):
    def collect(self) -> List[types.textureToGeom]: ...

class timeCollector(_NodeCollector):
    def collect(self) -> List[types.time]: ...

class timeEditorCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditor]: ...

class timeEditorAnimSourceCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorAnimSource]: ...

class timeEditorClipCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorClip]: ...

class timeEditorClipBaseCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorClipBase]: ...

class timeEditorClipEvaluatorCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorClipEvaluator]: ...

class timeEditorInterpolatorCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorInterpolator]: ...

class timeEditorTracksCollector(_NodeCollector):
    def collect(self) -> List[types.timeEditorTracks]: ...

class timeFunctionCollector(_NodeCollector):
    def collect(self) -> List[types.timeFunction]: ...

class timeToUnitConversionCollector(_NodeCollector):
    def collect(self) -> List[types.timeToUnitConversion]: ...

class timeWarpCollector(_NodeCollector):
    def collect(self) -> List[types.timeWarp]: ...

class toggleManipCollector(_NodeCollector):
    def collect(self) -> List[types.toggleManip]: ...

class toggleOnLineManipCollector(_NodeCollector):
    def collect(self) -> List[types.toggleOnLineManip]: ...

class toolDrawManipCollector(_NodeCollector):
    def collect(self) -> List[types.toolDrawManip]: ...

class toolDrawManip2DCollector(_NodeCollector):
    def collect(self) -> List[types.toolDrawManip2D]: ...

class toonLineAttributesCollector(_NodeCollector):
    def collect(self) -> List[types.toonLineAttributes]: ...

class towPointOnCurveManipCollector(_NodeCollector):
    def collect(self) -> List[types.towPointOnCurveManip]: ...

class towPointOnSurfaceManipCollector(_NodeCollector):
    def collect(self) -> List[types.towPointOnSurfaceManip]: ...

class trackInfoManagerCollector(_NodeCollector):
    def collect(self) -> List[types.trackInfoManager]: ...

class trans2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.trans2dManip]: ...

class transUV2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.transUV2dManip]: ...

class transferAttributesCollector(_NodeCollector):
    def collect(self) -> List[types.transferAttributes]: ...

class transferFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.transferFalloff]: ...

class transformCollector(_NodeCollector):
    def collect(self) -> List[types.transform]: ...

class transformGeometryCollector(_NodeCollector):
    def collect(self) -> List[types.transformGeometry]: ...

class translateLimitsManipCollector(_NodeCollector):
    def collect(self) -> List[types.translateLimitsManip]: ...

class translateManipCollector(_NodeCollector):
    def collect(self) -> List[types.translateManip]: ...

class translateUVManipCollector(_NodeCollector):
    def collect(self) -> List[types.translateUVManip]: ...

class translationFromMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.translationFromMatrix]: ...

class transposeMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.transposeMatrix]: ...

class trimCollector(_NodeCollector):
    def collect(self) -> List[types.trim]: ...

class trimManipCollector(_NodeCollector):
    def collect(self) -> List[types.trimManip]: ...

class trimWithBoundariesCollector(_NodeCollector):
    def collect(self) -> List[types.trimWithBoundaries]: ...

class triplanarProjManipCollector(_NodeCollector):
    def collect(self) -> List[types.triplanarProjManip]: ...

class tripleShadingSwitchCollector(_NodeCollector):
    def collect(self) -> List[types.tripleShadingSwitch]: ...

class trsInsertManipCollector(_NodeCollector):
    def collect(self) -> List[types.trsInsertManip]: ...

class trsManipCollector(_NodeCollector):
    def collect(self) -> List[types.trsManip]: ...

class truncateCollector(_NodeCollector):
    def collect(self) -> List[types.truncate]: ...

class turbulenceFieldCollector(_NodeCollector):
    def collect(self) -> List[types.turbulenceField]: ...

class turbulenceManipCollector(_NodeCollector):
    def collect(self) -> List[types.turbulenceManip]: ...

class tweakCollector(_NodeCollector):
    def collect(self) -> List[types.tweak]: ...

class typeCollector(_NodeCollector):
    def collect(self) -> List[types.type]: ...

class typeExtrudeCollector(_NodeCollector):
    def collect(self) -> List[types.typeExtrude]: ...

class typeManipCollector(_NodeCollector):
    def collect(self) -> List[types.typeManip]: ...

class ufeProxyCameraShapeCollector(_NodeCollector):
    def collect(self) -> List[types.ufeProxyCameraShape]: ...

class ufeProxyTransformCollector(_NodeCollector):
    def collect(self) -> List[types.ufeProxyTransform]: ...

class uniformFalloffCollector(_NodeCollector):
    def collect(self) -> List[types.uniformFalloff]: ...

class uniformFieldCollector(_NodeCollector):
    def collect(self) -> List[types.uniformField]: ...

class unitConversionCollector(_NodeCollector):
    def collect(self) -> List[types.unitConversion]: ...

class unitToTimeConversionCollector(_NodeCollector):
    def collect(self) -> List[types.unitToTimeConversion]: ...

class unknownCollector(_NodeCollector):
    def collect(self) -> List[types.unknown]: ...

class unknownDagCollector(_NodeCollector):
    def collect(self) -> List[types.unknownDag]: ...

class unknownTransformCollector(_NodeCollector):
    def collect(self) -> List[types.unknownTransform]: ...

class unpremultiplyCollector(_NodeCollector):
    def collect(self) -> List[types.unpremultiply]: ...

class untrimCollector(_NodeCollector):
    def collect(self) -> List[types.untrim]: ...

class usdPreviewSurfaceCollector(_NodeCollector):
    def collect(self) -> List[types.usdPreviewSurface]: ...

class useBackgroundCollector(_NodeCollector):
    def collect(self) -> List[types.useBackground]: ...

class uv2dManipCollector(_NodeCollector):
    def collect(self) -> List[types.uv2dManip]: ...

class uvChooserCollector(_NodeCollector):
    def collect(self) -> List[types.uvChooser]: ...

class uvPinCollector(_NodeCollector):
    def collect(self) -> List[types.uvPin]: ...

class valueOverrideCollector(_NodeCollector):
    def collect(self) -> List[types.valueOverride]: ...

class vectorAdjustCollector(_NodeCollector):
    def collect(self) -> List[types.vectorAdjust]: ...

class vectorExtrudeCollector(_NodeCollector):
    def collect(self) -> List[types.vectorExtrude]: ...

class vectorProductCollector(_NodeCollector):
    def collect(self) -> List[types.vectorProduct]: ...

class vertexBakeSetCollector(_NodeCollector):
    def collect(self) -> List[types.vertexBakeSet]: ...

class viewColorManagerCollector(_NodeCollector):
    def collect(self) -> List[types.viewColorManager]: ...

class volumeAxisFieldCollector(_NodeCollector):
    def collect(self) -> List[types.volumeAxisField]: ...

class volumeBindManipCollector(_NodeCollector):
    def collect(self) -> List[types.volumeBindManip]: ...

class volumeFogCollector(_NodeCollector):
    def collect(self) -> List[types.volumeFog]: ...

class volumeLightCollector(_NodeCollector):
    def collect(self) -> List[types.volumeLight]: ...

class volumeNoiseCollector(_NodeCollector):
    def collect(self) -> List[types.volumeNoise]: ...

class volumeShaderCollector(_NodeCollector):
    def collect(self) -> List[types.volumeShader]: ...

class vortexFieldCollector(_NodeCollector):
    def collect(self) -> List[types.vortexField]: ...

class waterCollector(_NodeCollector):
    def collect(self) -> List[types.water]: ...

class weightGeometryFilterCollector(_NodeCollector):
    def collect(self) -> List[types.weightGeometryFilter]: ...

class wireCollector(_NodeCollector):
    def collect(self) -> List[types.wire]: ...

class woodCollector(_NodeCollector):
    def collect(self) -> List[types.wood]: ...

class wrapCollector(_NodeCollector):
    def collect(self) -> List[types.wrap]: ...

class wtAddMatrixCollector(_NodeCollector):
    def collect(self) -> List[types.wtAddMatrix]: ...

class xformManipCollector(_NodeCollector):
    def collect(self) -> List[types.xformManip]: ...

class xgmArchiveGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmArchiveGuide]: ...

class xgmCardGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmCardGuide]: ...

class xgmConnectivityCollector(_NodeCollector):
    def collect(self) -> List[types.xgmConnectivity]: ...

class xgmCurveToSplineCollector(_NodeCollector):
    def collect(self) -> List[types.xgmCurveToSpline]: ...

class xgmDescriptionCollector(_NodeCollector):
    def collect(self) -> List[types.xgmDescription]: ...

class xgmGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmGuide]: ...

class xgmGuideManipCollector(_NodeCollector):
    def collect(self) -> List[types.xgmGuideManip]: ...

class xgmGuideSculptManipCollector(_NodeCollector):
    def collect(self) -> List[types.xgmGuideSculptManip]: ...

class xgmHairMappingCollector(_NodeCollector):
    def collect(self) -> List[types.xgmHairMapping]: ...

class xgmMakeGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmMakeGuide]: ...

class xgmModifierBaseCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierBase]: ...

class xgmModifierClumpCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierClump]: ...

class xgmModifierCollisionCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierCollision]: ...

class xgmModifierCutCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierCut]: ...

class xgmModifierDisplacementCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierDisplacement]: ...

class xgmModifierGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierGuide]: ...

class xgmModifierLinearWireCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierLinearWire]: ...

class xgmModifierNoiseCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierNoise]: ...

class xgmModifierScaleCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierScale]: ...

class xgmModifierSculptCollector(_NodeCollector):
    def collect(self) -> List[types.xgmModifierSculpt]: ...

class xgmNurbsPatchCollector(_NodeCollector):
    def collect(self) -> List[types.xgmNurbsPatch]: ...

class xgmPaletteCollector(_NodeCollector):
    def collect(self) -> List[types.xgmPalette]: ...

class xgmPatchCollector(_NodeCollector):
    def collect(self) -> List[types.xgmPatch]: ...

class xgmPointsManipCollector(_NodeCollector):
    def collect(self) -> List[types.xgmPointsManip]: ...

class xgmPointsViewerCollector(_NodeCollector):
    def collect(self) -> List[types.xgmPointsViewer]: ...

class xgmSeExprCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSeExpr]: ...

class xgmSphereGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSphereGuide]: ...

class xgmSplineBaseCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSplineBase]: ...

class xgmSplineCacheCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSplineCache]: ...

class xgmSplineDescriptionCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSplineDescription]: ...

class xgmSplineGuideCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSplineGuide]: ...

class xgmSubdPatchCollector(_NodeCollector):
    def collect(self) -> List[types.xgmSubdPatch]: ...
